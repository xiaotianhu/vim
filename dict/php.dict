abs ; 绝对值
acos ; 反余弦
acosh ; 反双曲余弦
addcslashes ; 以 C 语言风格使用反斜线转义字符串中的字符
addslashes ; 使用反斜线引用字符串
apache_child_terminate ; 在本次请求结束后终止 apache 子进程
apache_getenv ; 获取 Apache subprocess_env 变量
apache_get_modules ; 获得已加载的Apache模块列表
apache_get_version ; 获得Apache版本信息
apache_lookup_uri ; 对指定的 URI 执行部分请求并返回所有有关信息
apache_note ; 取得或设置 apache 请求记录
apache_request_headers ; 获取全部 HTTP 请求头信息
apache_reset_timeout ; 重置 Apache 写入计时器
apache_response_headers ; 获得全部 HTTP 响应头信息
apache_setenv ; 设置 Apache 子进程环境变量
APCIterator::current ; 获取当前项
APCIterator::getTotalCount ; 获取总数
APCIterator::getTotalHits ; 获取缓存命中数
APCIterator::getTotalSize ; 获取所有缓存的尺寸大小
APCIterator::key ; Get iterator key获取迭代器的键
APCIterator::next ; 移到下一项
APCIterator::rewind ; 倒退迭代器
APCIterator::valid ; 检查当前位置是否有效
APCIterator::__construct ; 构造一个 APCIterator 迭代器对象
apc_add ; 缓存一个变量到数据存储
apc_bin_dump ; Get a binary dump of the given files and user variables
apc_bin_dumpfile ; Output a binary dump of cached files and user variables to a file
apc_bin_load ; Load a binary dump into the APC file/user cache
apc_bin_loadfile ; Load a binary dump from a file into the APC file/user cache
apc_cache_info ; Retrieves cached information from APC's data store
apc_cas ; 用新值更新旧值
apc_clear_cache ; 清除APC缓存
apc_compile_file ; Stores a file in the bytecode cache, bypassing all filters.
apc_dec ; Decrease a stored number
apc_define_constants ; Defines a set of constants for retrieval and mass-definition
apc_delete ; 从用户缓存中删除某个变量
apc_delete_file ; Deletes files from the opcode cache
apc_exists ; 检查APC中是否存在某个或者某些key
apc_fetch ; 从缓存中取出存储的变量
apc_inc ; 递增一个储存的数字
apc_load_constants ; Loads a set of constants from the cache
apc_sma_info ; Retrieves APC's Shared Memory Allocation information
apc_store ; Cache a variable in the data store
AppendIterator::append ; Appends an iterator
AppendIterator::current ; Gets the current value
AppendIterator::getArrayIterator ; Gets the ArrayIterator
AppendIterator::getInnerIterator ; Gets the inner iterator
AppendIterator::getIteratorIndex ; Gets an index of iterators
AppendIterator::key ; Gets the current key
AppendIterator::next ; Moves to the next element
AppendIterator::rewind ; Rewinds the Iterator
AppendIterator::valid ; Checks validity of the current element
AppendIterator::__construct ; Constructs an AppendIterator
array ; 新建一个数组
ArrayAccess::offsetExists ; 检查一个偏移位置是否存在
ArrayAccess::offsetGet ; 获取一个偏移位置的值
ArrayAccess::offsetSet ; 设置一个偏移位置的值
ArrayAccess::offsetUnset ; 复位一个偏移位置的值
ArrayIterator::append ; Append an element
ArrayIterator::asort ; Sort array by values
ArrayIterator::count ; Count elements
ArrayIterator::current ; Return current array entry
ArrayIterator::getArrayCopy ; Get array copy
ArrayIterator::getFlags ; Get flags
ArrayIterator::key ; Return current array key
ArrayIterator::ksort ; Sort array by keys
ArrayIterator::natcasesort ; Sort an array naturally, case insensitive
ArrayIterator::natsort ; Sort an array naturally
ArrayIterator::next ; Move to next entry
ArrayIterator::offsetExists ; Check if offset exists
ArrayIterator::offsetGet ; Get value for an offset
ArrayIterator::offsetSet ; Set value for an offset
ArrayIterator::offsetUnset ; Unset value for an offset
ArrayIterator::rewind ; Rewind array back to the start
ArrayIterator::seek ; Seek to position
ArrayIterator::serialize ; Serialize
ArrayIterator::setFlags ; Set behaviour flags
ArrayIterator::uasort ; User defined sort
ArrayIterator::uksort ; User defined sort
ArrayIterator::unserialize ; Unserialize
ArrayIterator::valid ; Check whether array contains more entries
ArrayIterator::__construct ; Construct an ArrayIterator
ArrayObject::append ; 追加新的值作为最后一个元素。
ArrayObject::asort ; Sort the entries by value
ArrayObject::count ; 统计 ArrayObject 内 public 属性的数量
ArrayObject::exchangeArray ; Exchange the array for another one.
ArrayObject::getArrayCopy ; Creates a copy of the ArrayObject.
ArrayObject::getFlags ; Gets the behavior flags.
ArrayObject::getIterator ; Create a new iterator from an ArrayObject instance
ArrayObject::getIteratorClass ; Gets the iterator classname for the ArrayObject.
ArrayObject::ksort ; Sort the entries by key
ArrayObject::natcasesort ; Sort an array using a case insensitive &quot;natural order&quot; algorithm
ArrayObject::natsort ; Sort entries using a &quot;natural order&quot; algorithm
ArrayObject::offsetExists ; Returns whether the requested index exists
ArrayObject::offsetGet ; Returns the value at the specified index
ArrayObject::offsetSet ; 为指定索引设定新的值
ArrayObject::offsetUnset ; Unsets the value at the specified index
ArrayObject::serialize ; Serialize an ArrayObject
ArrayObject::setFlags ; Sets the behavior flags.
ArrayObject::setIteratorClass ; Sets the iterator classname for the ArrayObject.
ArrayObject::uasort ; Sort the entries with a user-defined comparison function and maintain key association
ArrayObject::uksort ; Sort the entries by keys using a user-defined comparison function
ArrayObject::unserialize ; Unserialize an ArrayObject
ArrayObject::__construct ; Construct a new array object
array_change_key_case ; 返回字符串键名全为小写或大写的数组
array_chunk ; 将一个数组分割成多个
array_column ; 返回数组中指定的一列
array_combine ; 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值
array_count_values ; 统计数组中所有的值出现的次数
array_diff ; 计算数组的差集
array_diff_assoc ; 带索引检查计算数组的差集
array_diff_key ; 使用键名比较计算数组的差集
array_diff_uassoc ; 用用户提供的回调函数做索引检查来计算数组的差集
array_diff_ukey ; 用回调函数对键名比较计算数组的差集
array_fill ; 用给定的值填充数组
array_fill_keys ; 使用指定的键和值填充数组
array_filter ; 用回调函数过滤数组中的单元
array_flip ; 交换数组中的键和值
array_intersect ; 计算数组的交集
array_intersect_assoc ; 带索引检查计算数组的交集
array_intersect_key ; 使用键名比较计算数组的交集
array_intersect_uassoc ; 带索引检查计算数组的交集，用回调函数比较索引
array_intersect_ukey ; 用回调函数比较键名来计算数组的交集
array_keys ; 返回数组中部分的或所有的键名
array_key_exists ; 检查给定的键名或索引是否存在于数组中
array_map ; 将回调函数作用到给定数组的单元上
array_merge ; 合并一个或多个数组
array_merge_recursive ; 递归地合并一个或多个数组
array_multisort ; 对多个数组或多维数组进行排序
array_pad ; 用值将数组填补到指定长度
array_pop ; 将数组最后一个单元弹出（出栈）
array_product ; 计算数组中所有值的乘积
array_push ; 将一个或多个单元压入数组的末尾（入栈）
array_rand ; 从数组中随机取出一个或多个单元
array_reduce ; 用回调函数迭代地将数组简化为单一的值
array_replace ; 使用传递的数组替换第一个数组的元素
array_replace_recursive ; 使用传递的数组递归替换第一个数组的元素
array_reverse ; 返回一个单元顺序相反的数组
array_search ; 在数组中搜索给定的值，如果成功则返回相应的键名
array_shift ; 将数组开头的单元移出数组
array_slice ; 从数组中取出一段
array_splice ; 把数组中的一部分去掉并用其它值取代
array_sum ; 计算数组中所有值的和
array_udiff ; 用回调函数比较数据来计算数组的差集
array_udiff_assoc ; 带索引检查计算数组的差集，用回调函数比较数据
array_udiff_uassoc ; 带索引检查计算数组的差集，用回调函数比较数据和索引
array_uintersect ; 计算数组的交集，用回调函数比较数据
array_uintersect_assoc ; 带索引检查计算数组的交集，用回调函数比较数据
array_uintersect_uassoc ; 带索引检查计算数组的交集，用回调函数比较数据和索引
array_unique ; 移除数组中重复的值
array_unshift ; 在数组开头插入一个或多个单元
array_values ; 返回数组中所有的值
array_walk ; 使用用户自定义函数对数组中的每个元素做回调处理
array_walk_recursive ; 对数组中的每个成员递归地应用用户函数
arsort ; 对数组进行逆向排序并保持索引关系
asin ; 反正弦
asinh ; 反双曲正弦
asort ; 对数组进行排序并保持索引关系
assert ; 检查一个断言是否为 FALSE
assert_options ; 设置/获取断言的各种标志
atan ; 反正切
atan2 ; 两个参数的反正切
atanh ; 反双曲正切
base64_decode ; 对使用 MIME base64 编码的数据进行解码
base64_encode ; 使用 MIME base64 对数据进行编码
basename ; 返回路径中的文件名部分
base_convert ; 在任意进制之间转换数字
bcadd ; 2个任意精度数字的加法计算
bccomp ; 比较两个任意精度的数字
bcdiv ; 2个任意精度的数字除法计算
bcmod ; 对一个任意精度数字取模
bcmul ; 2个任意精度数字乘法计算
bcpow ; 任意精度数字的成方
bcpowmod ; Raise an arbitrary precision number to another, reduced by a specified modulus
bcscale ; 设置所有bc数学函数的默认小数点保留位数
bcsqrt ; 任意精度数字的二次方根
bcsub ; 2个任意精度数字的减法
bin2hex ; 函数把ASCII字符的字符串转换为十六进制值
bindec ; 二进制转换为十进制
bindtextdomain ; Sets the path for a domain
bind_textdomain_codeset ; Specify the character encoding in which the messages from the DOMAIN message catalog will be returned
boolval ; Get the boolean value of a variable
bzclose ; 关闭一个 bzip2 文件
bzcompress ; 把一个字符串压缩成 bzip2 编码数据
bzdecompress ; 解压经 bzip2 编码过的数据
bzerrno ; 返回一个 bzip2 错误码
bzerror ; 返回包含 bzip2 错误号和错误字符串的一个 array
bzerrstr ; 返回一个 bzip2 的错误字符串
bzflush ; 强制写入所有写缓冲区的数据
bzopen ; 打开一个经 bzip2 压缩过的文件
bzread ; bzip2 文件二进制安全地读取
bzwrite ; 二进制安全地写入 bzip2 文件
CachingIterator::count ; The number of elements in the iterator
CachingIterator::current ; Return the current element
CachingIterator::getCache ; Retrieve the contents of the cache
CachingIterator::getFlags ; Get flags used
CachingIterator::getInnerIterator ; Returns the inner iterator
CachingIterator::hasNext ; Check whether the inner iterator has a valid next element
CachingIterator::key ; Return the key for the current element
CachingIterator::next ; Move the iterator forward
CachingIterator::offsetExists ; The offsetExists purpose
CachingIterator::offsetGet ; The offsetGet purpose
CachingIterator::offsetSet ; The offsetSet purpose
CachingIterator::offsetUnset ; The offsetUnset purpose
CachingIterator::rewind ; Rewind the iterator
CachingIterator::setFlags ; The setFlags purpose
CachingIterator::valid ; Check whether the current element is valid
CachingIterator::__construct ; Construct a new CachingIterator object for the iterator.
CachingIterator::__toString ; Return the string representation of the current element
CallbackFilterIterator::accept ; Calls the callback with the current value, the current key and the inner iterator as arguments
CallbackFilterIterator::__construct ; Create a filtered iterator from another iterator
call_user_func ; 把第一个参数作为回调函数调用
call_user_func_array ; 调用回调函数，并把一个数组参数作为回调函数的参数
call_user_method ; 对特定对象调用用户方法（已废弃）
call_user_method_array ; 调用一个用户方法，同时传递参数数组（已废弃）
cal_days_in_month ; 返回某个历法中某年中某月的天数
cal_from_jd ; 转换Julian Day计数到一个支持的历法。
cal_info ; 返回选定历法的信息
cal_to_jd ; 从一个支持的历法转变为Julian Day计数。
ceil ; 进一法取整
chdb::get ; Gets the value associated with a key
chdb::__construct ; Creates a chdb instance
chdb_create ; Creates a chdb file
chdir ; 改变目录
checkdate ; 验证一个格里高里日期
checkdnsrr ; 给指定的主机（域名）或者IP地址做DNS通信检查
chgrp ; 改变文件所属的组
chmod ; 改变文件模式
chop ; rtrim 的别名
chown ; 改变文件的所有者
chr ; 返回指定的字符
chroot ; 改变根目录
chunk_split ; 将字符串分割成小块
class_alias ; 为一个类创建别名
class_exists ; 检查类是否已定义
class_implements ; 返回指定的类实现的所有接口。
class_parents ; 返回指定类的父类。
class_uses ; Return the traits used by the given class
clearstatcache ; 清除文件状态缓存
cli_get_process_title ; Returns the current process title
cli_set_process_title ; Sets the process title
closedir ; 关闭目录句柄
closelog ; 关闭系统日志链接
Closure::bind ; 复制一个闭包，绑定指定的$this对象和类作用域。
Closure::bindTo ; 复制当前闭包对象，绑定指定的$this对象和类作用域。
Closure::__construct ; 用于禁止实例化的构造函数
Collectable::isGarbage ; Determine whether an object has been marked as garbage
Collectable::setGarbage ; Mark an object as garbage
compact ; 建立一个数组，包括变量名和它们的值
Cond::broadcast ; 广播条件变量
Cond::create ; 创建一个条件变量
Cond::destroy ; 销毁条件变量
Cond::signal ; 发送唤醒信号
Cond::wait ; 等待
connection_aborted ; 检查客户端是否已经断开
connection_status ; 返回连接的状态位
constant ; 返回一个常量的值
Context 参数 ; Context 参数列表
convert_cyr_string ; 将字符由一种 Cyrillic 字符转换成另一种
convert_uudecode ; 解码一个 uuencode 编码的字符串
convert_uuencode ; 使用 uuencode 编码一个字符串
copy ; 拷贝文件
cos ; 余弦
cosh ; 双曲余弦
count ; 计算数组中的单元数目或对象中的属性个数
Countable::count ; 统计一个对象的元素个数
Counter::bumpValue ; 修改计数器的当前值。
Counter::getMeta ; 返回计数器的部分元信息。
Counter::getNamed ; 取回一个名称已存在的计数器。
Counter::getValue ; 获取计数器的当前值。
Counter::resetValue ; 重置计数器的当前值。
Counter::setCounterClass ; 设置由 Counter::getNamed 返回的计数器类。
Counter::__construct ; 创建一个包含单一数值的计数器实例。
counter_bump ; 修改简单计数器的当前值。
counter_bump_value ; 更新计数器资源的当前值。
counter_create ; 创建一个包含单个数值的计数器。
counter_get ; 获取简单计数器的当前值。
counter_get_meta ; 返回计数器资源的部分元信息。
counter_get_named ; 按名称查询一个已存在的计数器，并作为资源返回。
counter_get_value ; 获取计数器资源的当前值。
counter_reset ; 重置简单计数器的当前值。
counter_reset_value ; 重置计数器资源的当前值。
count_chars ; 返回字符串所用字符的信息
crack_check ; Performs an obscure check with the given password
crack_closedict ; Closes an open CrackLib dictionary
crack_getlastmessage ; Returns the message from the last obscure check
crack_opendict ; Opens a new CrackLib dictionary
crc32 ; 计算一个字符串的 crc32 多项式
create_function ; Create an anonymous (lambda-style) function
crypt ; 单向字符串散列
ctype_alnum ; 做字母和数字字符检测
ctype_alpha ; 做纯字符检测
ctype_cntrl ; 做控制字符检测
ctype_digit ; 做纯数字检测
ctype_graph ; 做可打印字符串检测，空格除外
ctype_lower ; 做小写字符检测
ctype_print ; 做可打印字符检测
ctype_punct ; 检测可打印的字符是不是不包含空白、数字和字母
ctype_space ; 做空白字符检测
ctype_upper ; 做大写字母检测
ctype_xdigit ; 检测字符串是否只包含十六进制字符
CURL context options ; CURL 上下文选项列表
curl_close ; 关闭一个cURL会话
curl_copy_handle ; 复制一个cURL句柄和它的所有选项
curl_errno ; 返回最后一次的错误号
curl_error ; 返回一个保护当前会话最近一次错误的字符串
curl_escape ; 使用 URL 编码给定的字符串
curl_exec ; 执行一个cURL会话
curl_file_create ; 创建一个 CURLFile 对象
curl_getinfo ; 获取一个cURL连接资源句柄的信息
curl_init ; 初始化一个cURL会话
curl_multi_add_handle ; 向curl批处理会话中添加单独的curl句柄
curl_multi_close ; 关闭一组cURL句柄
curl_multi_exec ; 运行当前 cURL 句柄的子连接
curl_multi_getcontent ; 如果设置了CURLOPT_RETURNTRANSFER，则返回获取的输出的文本流
curl_multi_info_read ; 获取当前解析的cURL的相关传输信息
curl_multi_init ; 返回一个新cURL批处理句柄
curl_multi_remove_handle ; 移除curl批处理句柄资源中的某个句柄资源
curl_multi_select ; 等待所有cURL批处理中的活动连接
curl_multi_setopt ; 为 cURL 并行处理设置一个选项
curl_multi_strerror ; Return string describing error code
curl_pause ; Pause and unpause a connection
curl_reset ; Reset all options of a libcurl session handle
curl_setopt ; 设置一个cURL传输选项
curl_setopt_array ; 为cURL传输会话批量设置选项
curl_share_close ; Close a cURL share handle
curl_share_init ; Initialize a cURL share handle
curl_share_setopt ; Set an option for a cURL share handle.
curl_strerror ; Return string describing the given error code
curl_unescape ; 解码给定的 URL 编码的字符串
curl_version ; 获取cURL版本信息
current ; 返回数组中的当前单元
data:// ; 数据（RFC 2397）
date ; 格式化一个本地时间／日期
DateInterval::createFromDateString ; Sets up a DateInterval from the relative parts of the string
DateInterval::format ; Formats the interval
DateInterval::__construct ; Creates a new DateInterval object
DatePeriod::__construct ; Creates a new DatePeriod object
DateTime::createFromFormat ; Returns new DateTime object formatted according to the specified format
DateTime::diff ; Returns the difference between two DateTime objects
DateTime::format ; Returns date formatted according to given format
DateTime::getLastErrors ; Returns the warnings and errors
DateTime::getOffset ; Returns the timezone offset
DateTime::getTimestamp ; Gets the Unix timestamp
DateTime::getTimezone ; Return time zone relative to given DateTime
DateTime::modify ; Alters the timestamp
DateTime::setDate ; Sets the date
DateTime::setISODate ; Sets the ISO date
DateTime::setTime ; Sets the time
DateTime::setTimestamp ; Sets the date and time based on an Unix timestamp
DateTime::setTimezone ; Sets the time zone for the DateTime object
DateTime::__construct ; Returns new DateTime object
DateTime::__set_state ; The __set_state handler
DateTime::__wakeup ; The __wakeup handler
DateTimeImmutable::add ; Adds an amount of days, months, years, hours, minutes and seconds
DateTimeImmutable::createFromFormat ; Returns new DateTimeImmutable object formatted according to the specified format
DateTimeImmutable::createFromMutable ; Returns new DateTimeImmutable object encapsulating the given DateTime object
DateTimeImmutable::getLastErrors ; Returns the warnings and errors
DateTimeImmutable::modify ; Creates a new object with modified timestamp
DateTimeImmutable::setDate ; Sets the date
DateTimeImmutable::setISODate ; Sets the ISO date
DateTimeImmutable::setTime ; Sets the time
DateTimeImmutable::setTimestamp ; Sets the date and time based on an Unix timestamp
DateTimeImmutable::setTimezone ; Sets the time zone
DateTimeImmutable::sub ; Subtracts an amount of days, months, years, hours, minutes and seconds
DateTimeImmutable::__construct ; Returns new DateTimeImmutable object
DateTimeImmutable::__set_state ; The __set_state handler
DateTimeZone::getLocation ; Returns location information for a timezone
DateTimeZone::getName ; Returns the name of the timezone
DateTimeZone::getOffset ; Returns the timezone offset from GMT
DateTimeZone::getTransitions ; Returns all transitions for the timezone
DateTimeZone::listAbbreviations ; Returns associative array containing dst, offset and the timezone name
DateTimeZone::listIdentifiers ; Returns a numerically indexed array containing all defined timezone identifiers
DateTimeZone::__construct ; Creates new DateTimeZone object
date_add ; 别名 DateTime::add
date_create ; 别名 DateTime::__construct
date_create_from_format ; 别名 DateTime::createFromFormat
date_create_immutable ; 别名 DateTimeImmutable::__construct
date_create_immutable_from_format ; 别名 DateTimeImmutable::createFromFormat
date_date_set ; 别名 DateTime::setDate
date_default_timezone_get ; 取得一个脚本中所有日期时间函数所使用的默认时区
date_default_timezone_set ; 设定用于一个脚本中所有日期时间函数的默认时区
date_diff ; 别名 DateTime::diff
date_format ; 别名 DateTime::format
date_get_last_errors ; 别名 DateTime::getLastErrors
date_interval_create_from_date_string ; 别名 DateInterval::createFromDateString
date_interval_format ; 别名 DateInterval::format
date_isodate_set ; 别名 DateTime::setISODate
date_modify ; 别名 DateTime::modify
date_offset_get ; 别名 DateTime::getOffset
date_parse ; Returns associative array with detailed info about given date
date_parse_from_format ; Get info about given date formatted according to the specified format
date_sub ; 别名 DateTime::sub
date_sunrise ; 返回给定的日期与地点的日出时间
date_sunset ; 返回给定的日期与地点的日落时间
date_sun_info ; Returns an array with information about sunset/sunrise and twilight begin/end
date_timestamp_get ; 别名 DateTime::getTimestamp
date_timestamp_set ; 别名 DateTime::setTimestamp
date_timezone_get ; 别名 DateTime::getTimezone
date_timezone_set ; 别名 DateTime::setTimezone
date_time_set ; 别名 DateTime::setTime
dcgettext ; Overrides the domain for a single lookup
dcngettext ; Plural version of dcgettext
debug_backtrace ; 产生一条回溯跟踪(backtrace)
debug_print_backtrace ; 打印一条回溯。
debug_zval_dump ; Dumps a string representation of an internal zend value to output
decbin ; 十进制转换为二进制
dechex ; 十进制转换为十六进制
decoct ; 十进制转换为八进制
define ; 定义一个常量
defined ; 检查某个名称的常量是否存在
define_syslog_variables ; Initializes all syslog related variables
deg2rad ; 将角度转换为弧度
delete ; 参见 unlink 或 unset
dgettext ; Override the current domain
die ; 等同于 exit
dir ; 返回一个 Directory 类实例
Directory::close ; 释放目录句柄
Directory::read ; 从目录句柄中读取条目
Directory::rewind ; 倒回目录句柄
DirectoryIterator::current ; Return the current DirectoryIterator item.
DirectoryIterator::getATime ; Get last access time of the current DirectoryIterator item
DirectoryIterator::getBasename ; Get base name of current DirectoryIterator item.
DirectoryIterator::getCTime ; Get inode change time of the current DirectoryIterator item
DirectoryIterator::getExtension ; Gets the file extension
DirectoryIterator::getFilename ; Return file name of current DirectoryIterator item.
DirectoryIterator::getGroup ; Get group for the current DirectoryIterator item
DirectoryIterator::getInode ; Get inode for the current DirectoryIterator item
DirectoryIterator::getMTime ; Get last modification time of current DirectoryIterator item
DirectoryIterator::getOwner ; Get owner of current DirectoryIterator item
DirectoryIterator::getPath ; Get path of current Iterator item without filename
DirectoryIterator::getPathname ; Return path and file name of current DirectoryIterator item
DirectoryIterator::getPerms ; Get the permissions of current DirectoryIterator item
DirectoryIterator::getSize ; Get size of current DirectoryIterator item
DirectoryIterator::getType ; Determine the type of the current DirectoryIterator item
DirectoryIterator::isDir ; Determine if current DirectoryIterator item is a directory
DirectoryIterator::isDot ; Determine if current DirectoryIterator item is '.' or '..'
DirectoryIterator::isExecutable ; Determine if current DirectoryIterator item is executable
DirectoryIterator::isFile ; Determine if current DirectoryIterator item is a regular file
DirectoryIterator::isLink ; Determine if current DirectoryIterator item is a symbolic link
DirectoryIterator::isReadable ; Determine if current DirectoryIterator item can be read
DirectoryIterator::isWritable ; Determine if current DirectoryIterator item can be written to
DirectoryIterator::key ; Return the key for the current DirectoryIterator item
DirectoryIterator::next ; Move forward to next DirectoryIterator item
DirectoryIterator::rewind ; Rewind the DirectoryIterator back to the start
DirectoryIterator::seek ; Seek to a DirectoryIterator item
DirectoryIterator::valid ; Check whether current DirectoryIterator position is a valid file
DirectoryIterator::__construct ; Constructs a new directory iterator from a path
DirectoryIterator::__toString ; Get file name as a string
dirname ; 返回路径中的目录部分
diskfreespace ; disk_free_space 的别名
disk_free_space ; 返回目录中的可用空间
disk_total_space ; 返回一个目录的磁盘总大小
dl ; 运行时载入一个 PHP 扩展
dngettext ; Plural version of dgettext
dns_check_record ; 别名 checkdnsrr
dns_get_mx ; 别名 getmxrr
dns_get_record ; 获取指定主机的DNS记录
DOMAttr::isId ; Checks if attribute is a defined ID
DOMAttr::__construct ; Creates a new DOMAttr object
DOMCdataSection::__construct ; Constructs a new DOMCdataSection object
DOMCharacterData::appendData ; Append the string to the end of the character data of the node
DOMCharacterData::deleteData ; Remove a range of characters from the node
DOMCharacterData::insertData ; Insert a string at the specified 16-bit unit offset
DOMCharacterData::replaceData ; Replace a substring within the DOMCharacterData node
DOMCharacterData::substringData ; Extracts a range of data from the node
DOMComment::__construct ; Creates a new DOMComment object
DOMDocument::createAttribute ; Create new attribute
DOMDocument::createAttributeNS ; Create new attribute node with an associated namespace
DOMDocument::createCDATASection ; Create new cdata node
DOMDocument::createComment ; Create new comment node
DOMDocument::createDocumentFragment ; Create new document fragment
DOMDocument::createElement ; Create new element node
DOMDocument::createElementNS ; Create new element node with an associated namespace
DOMDocument::createEntityReference ; Create new entity reference node
DOMDocument::createProcessingInstruction ; Creates new PI node
DOMDocument::createTextNode ; Create new text node
DOMDocument::getElementById ; Searches for an element with a certain id
DOMDocument::getElementsByTagName ; Searches for all elements with given local tag name
DOMDocument::getElementsByTagNameNS ; Searches for all elements with given tag name in specified namespace
DOMDocument::importNode ; Import node into current document
DOMDocument::load ; Load XML from a file
DOMDocument::loadHTML ; Load HTML from a string
DOMDocument::loadHTMLFile ; Load HTML from a file
DOMDocument::loadXML ; Load XML from a string
DOMDocument::normalizeDocument ; Normalizes the document
DOMDocument::registerNodeClass ; Register extended class used to create base node type
DOMDocument::relaxNGValidate ; Performs relaxNG validation on the document
DOMDocument::relaxNGValidateSource ; Performs relaxNG validation on the document
DOMDocument::save ; Dumps the internal XML tree back into a file
DOMDocument::saveHTML ; Dumps the internal document into a string using HTML formatting
DOMDocument::saveHTMLFile ; Dumps the internal document into a file using HTML formatting
DOMDocument::saveXML ; Dumps the internal XML tree back into a string
DOMDocument::schemaValidate ; Validates a document based on a schema
DOMDocument::schemaValidateSource ; Validates a document based on a schema
DOMDocument::validate ; Validates the document based on its DTD
DOMDocument::xinclude ; Substitutes XIncludes in a DOMDocument Object
DOMDocument::__construct ; Creates a new DOMDocument object
DOMDocumentFragment::appendXML ; Append raw XML data
DOMElement::getAttribute ; Returns value of attribute
DOMElement::getAttributeNode ; Returns attribute node
DOMElement::getAttributeNodeNS ; Returns attribute node
DOMElement::getAttributeNS ; Returns value of attribute
DOMElement::getElementsByTagName ; Gets elements by tagname
DOMElement::getElementsByTagNameNS ; Get elements by namespaceURI and localName
DOMElement::hasAttribute ; Checks to see if attribute exists
DOMElement::hasAttributeNS ; Checks to see if attribute exists
DOMElement::removeAttribute ; Removes attribute
DOMElement::removeAttributeNode ; Removes attribute
DOMElement::removeAttributeNS ; Removes attribute
DOMElement::setAttribute ; Adds new attribute
DOMElement::setAttributeNode ; Adds new attribute node to element
DOMElement::setAttributeNodeNS ; Adds new attribute node to element
DOMElement::setAttributeNS ; Adds new attribute
DOMElement::setIdAttribute ; Declares the attribute specified by name to be of type ID
DOMElement::setIdAttributeNode ; Declares the attribute specified by node to be of type ID
DOMElement::setIdAttributeNS ; Declares the attribute specified by local name and namespace URI to be of type ID
DOMElement::__construct ; Creates a new DOMElement object
DOMEntityReference::__construct ; Creates a new DOMEntityReference object
DOMImplementation::createDocument ; Creates a DOMDocument object of the specified type with its document element
DOMImplementation::createDocumentType ; Creates an empty DOMDocumentType object
DOMImplementation::hasFeature ; Test if the DOM implementation implements a specific feature
DOMImplementation::__construct ; Creates a new DOMImplementation object
DOMNamedNodeMap::getNamedItem ; Retrieves a node specified by name
DOMNamedNodeMap::getNamedItemNS ; Retrieves a node specified by local name and namespace URI
DOMNamedNodeMap::item ; Retrieves a node specified by index
DOMNode::appendChild ; Adds new child at the end of the children
DOMNode::C14N ; Canonicalize nodes to a string
DOMNode::C14NFile ; Canonicalize nodes to a file
DOMNode::cloneNode ; Clones a node
DOMNode::getLineNo ; Get line number for a node
DOMNode::getNodePath ; Get an XPath for a node
DOMNode::hasAttributes ; Checks if node has attributes
DOMNode::hasChildNodes ; Checks if node has children
DOMNode::insertBefore ; Adds a new child before a reference node
DOMNode::isDefaultNamespace ; Checks if the specified namespaceURI is the default namespace or not
DOMNode::isSameNode ; Indicates if two nodes are the same node
DOMNode::isSupported ; Checks if feature is supported for specified version
DOMNode::lookupNamespaceURI ; Gets the namespace URI of the node based on the prefix
DOMNode::lookupPrefix ; Gets the namespace prefix of the node based on the namespace URI
DOMNode::normalize ; Normalizes the node
DOMNode::removeChild ; Removes child from list of children
DOMNode::replaceChild ; Replaces a child
DOMNodelist::item ; Retrieves a node specified by index
DOMProcessingInstruction::__construct ; Creates a new DOMProcessingInstruction object
DOMText::isWhitespaceInElementContent ; Indicates whether this text node contains whitespace
DOMText::splitText ; Breaks this node into two nodes at the specified offset
DOMText::__construct ; Creates a new DOMText object
DOMXPath::evaluate ; Evaluates the given XPath expression and returns a typed result if possible
DOMXPath::query ; Evaluates the given XPath expression
DOMXPath::registerNamespace ; Registers the namespace with the DOMXPath object
DOMXPath::registerPhpFunctions ; Register PHP functions as XPath functions
DOMXPath::__construct ; Creates a new DOMXPath object
doubleval ; floatval 的别名
each ; 返回数组中当前的键／值对并将数组指针向前移动一步
easter_date ; 得到指定年份的复活节午夜时的Unix时间戳。
easter_days ; 得到指定年份的3月21日到复活节之间的天数
echo ; 输出一个或多个字符串
eio_cancel ; Cancels a request
eio_chmod ; Change file/direcrory permissions.
eio_chown ; Change file/direcrory permissions.
eio_close ; Close file
eio_custom ; Execute custom request like any other eio_* call.
eio_dup2 ; Duplicate a file descriptor
eio_event_loop ; Polls libeio until all requests proceeded
eio_fchmod ; Change file permissions.
eio_fchown ; Change file ownership
eio_fdatasync ; Synchronize a file's in-core state with storage device.
eio_fstat ; Get file status
eio_fstatvfs ; Get file system statistics
eio_fsync ; Synchronize a file's in-core state with storage device
eio_ftruncate ; Truncate a file
eio_futime ; Change file last access and modification times
eio_get_event_stream ; Get stream representing a variable used in internal communications with libeio.
eio_get_last_error ; Returns string describing the last error associated with a request resource
eio_grp ; Createsa request group.
eio_grp_add ; Adds a request to the request group.
eio_grp_cancel ; Cancels a request group
eio_grp_limit ; Set group limit
eio_init ; (Re-)initialize Eio
eio_link ; Create a hardlink for file
eio_lstat ; Get file status
eio_mkdir ; Create directory
eio_mknod ; Create a special or ordinary file.
eio_nop ; Does nothing, except go through the whole request cycle.
eio_npending ; Returns number of finished, but unhandled requests
eio_nready ; Returns number of not-yet handled requests
eio_nreqs ; Returns number of requests to be processed
eio_nthreads ; Returns number of threads currently in use
eio_open ; Opens a file
eio_poll ; Can be to be called whenever there are pending requests that need finishing.
eio_read ; Read from a file descriptor at given offset.
eio_readahead ; Perform file readahead into page cache
eio_readdir ; Reads through a whole directory
eio_readlink ; Read value of a symbolic link.
eio_realpath ; Get the canonicalized absolute pathname.
eio_rename ; Change the name or location of a file.
eio_rmdir ; Remove a directory
eio_seek ; Repositions the offset of the open file associated with the fd argument to the argument offset according to the directive whence
eio_sendfile ; Transfer data between file descriptors
eio_set_max_idle ; Set maximum number of idle threads.
eio_set_max_parallel ; Set maximum parallel threads
eio_set_max_poll_reqs ; Set maximum number of requests processed in a poll.
eio_set_max_poll_time ; Set maximum poll time
eio_set_min_parallel ; Set minimum parallel thread number
eio_stat ; Get file status
eio_statvfs ; Get file system statistics
eio_symlink ; Create a symbolic link
eio_sync ; Commit buffer cache to disk
eio_syncfs ; Calls Linux' syncfs syscall, if available
eio_sync_file_range ; Sync a file segment with disk
eio_truncate ; Truncate a file
eio_unlink ; Delete a name and possibly the file it refers to
eio_utime ; Change file last access and modification times.
eio_write ; Write to file
empty ; 检查一个变量是否为空
EmptyIterator::current ; The current() method
EmptyIterator::key ; The key() method
EmptyIterator::next ; The next() method
EmptyIterator::rewind ; The rewind() method
EmptyIterator::valid ; The valid() method
end ; 将数组的内部指针指向最后一个单元
ereg ; 正则表达式匹配
eregi ; 不区分大小写的正则表达式匹配
eregi_replace ; 不区分大小写的正则表达式替换
ereg_replace ; 正则表达式替换
ErrorException::getSeverity ; 获取异常的严重程度
ErrorException::__construct ; 异常构造函数
error_clear_last ; Clear the last error occurred
error_get_last ; 获取最后发生的错误
error_log ; 发送错误信息到某个地方
error_reporting ; 设置应该报告何种 PHP 错误
escapeshellarg ; 把字符串转码为可以在 shell 命令里使用的参数
escapeshellcmd ; shell 元字符转义
Ev::backend ; Returns an integer describing the backend used by libev.
Ev::depth ; Returns recursion depth
Ev::embeddableBackends ; Returns the set of backends that are embeddable in other event loops.
Ev::feedSignal ; Feed a signal event info Ev
Ev::feedSignalEvent ; Feed signal event into the default loop
Ev::resume ; Resume previously suspended default event loop
Ev::sleep ; Block the process for the given number of seconds.
Ev::stop ; Stops the default event loop
Ev::suspend ; Suspend the default event loop
Ev::time ; Returns the current time in fractional seconds since the epoch.
Ev::verify ; Performs internal consistency checks(for debugging)
eval ; 把字符串作为PHP代码执行
EvCheck::createStopped ; Create instance of a stopped EvCheck watcher
EvCheck::__construct ; Constructs the EvCheck watcher object
EvChild::createStopped ; Create instance of a stopped EvCheck watcher
EvChild::set ; Configures the watcher
EvChild::__construct ; Constructs the EvChild watcher object
EvEmbed::createStopped ; Create stopped EvEmbed watcher object
EvEmbed::set ; Configures the watcher
EvEmbed::sweep ; Make a single, non-blocking sweep over the embedded loop.
EvEmbed::__construct ; Constructs the EvEmbed object
Event::add ; Makes event pending
Event::addSignal ; Makes signal event pending
Event::addTimer ; Makes timer event pending
Event::del ; Makes event non-pending
Event::delSignal ; Makes signal event non-pending
Event::delTimer ; Makes timer event non-pending
Event::getSupportedMethods ; Returns array with of the names of the methods supported in this version of Libevent
Event::pending ; Detects whether event is pending or scheduled
Event::set ; Re-configures event
Event::setPriority ; Set event priority
Event::setTimer ; Re-configures timer event
Event::signal ; Constructs signal event object
Event::timer ; Constructs timer event object
Event::__construct ; Constructs Event object
EventBase::dispatch ; Dispatch pending events
EventBase::exit ; Stop dispatching events
EventBase::free ; Free resources allocated for this event base
EventBase::getFeatures ; Returns bitmask of features supported
EventBase::getMethod ; Returns event method in use
EventBase::getTimeOfDayCached ; Returns the current event base time
EventBase::gotExit ; Checks if the event loop was told to exit
EventBase::gotStop ; Checks if the event loop was told to exit
EventBase::loop ; Dispatch pending events
EventBase::priorityInit ; Sets number of priorities per event base
EventBase::reInit ; Re-initialize event base(after a fork).
EventBase::stop ; Tells event_base to stop dispatching events
EventBase::__construct ; Constructs EventBase object
EventBuffer::add ; Append data to the end of an event buffer
EventBuffer::addBuffer ; Move all data from a buffer provided to the current instance of EventBuffer
EventBuffer::copyout ; Copies out specified number of bytes from the front of the buffer
EventBuffer::enableLocking ; 说明
EventBuffer::expand ; Reserves space in buffer
EventBuffer::freeze ; Prevent calls that modify an event buffer from succeeding
EventBuffer::lock ; Acquires a lock on buffer
EventBuffer::prepend ; Prepend data to the front of the buffer
EventBuffer::prependBuffer ; Moves all data from source buffer to the front of current buffer
EventBuffer::read ; Read data from an evbuffer and drain the bytes read
EventBuffer::readFrom ; Read data from a file onto the end of the buffer
EventBuffer::readLine ; Extracts a line from the front of the buffer
EventBuffer::search ; Scans the buffer for an occurrence of a string
EventBuffer::searchEol ; Scans the buffer for an occurrence of an end of line
EventBuffer::substr ; Substracts a portion of the buffer data
EventBuffer::unfreeze ; Re-enable calls that modify an event buffer
EventBuffer::unlock ; Releases lock acquired by EventBuffer::lock
EventBuffer::write ; Write contents of the buffer to a file or socket
EventBuffer::__construct ; Constructs EventBuffer object
EventBufferEvent::close ; Closes file descriptor associated with the current buffer event
EventBufferEvent::connectHost ; Connects to a hostname with optionally asyncronous DNS resolving
EventBufferEvent::createPair ; Creates two buffer events connected to each other
EventBufferEvent::disable ; Disable events read, write, or both on a buffer event.
EventBufferEvent::enable ; Enable events read, write, or both on a buffer event.
EventBufferEvent::free ; Free a buffer event
EventBufferEvent::getDnsErrorString ; Returns string describing the last failed DNS lookup attempt
EventBufferEvent::getEnabled ; Returns bitmask of events currently enabled on the buffer event
EventBufferEvent::read ; Read buffer's data
EventBufferEvent::readBuffer ; Drains the entire contents of the input buffer and places them into buf
EventBufferEvent::setCallbacks ; Assigns read, write and event(status) callbacks
EventBufferEvent::setPriority ; Assign a priority to a bufferevent
EventBufferEvent::setTimeouts ; Set the read and write timeout for a buffer event
EventBufferEvent::setWatermark ; Adjusts read and/or write watermarks
EventBufferEvent::sslError ; Returns most recent OpenSSL error reported on the buffer event
EventBufferEvent::sslFilter ; Create a new SSL buffer event to send its data over another buffer event
EventBufferEvent::sslGetCipherInfo ; Returns a textual description of the cipher.
EventBufferEvent::sslGetCipherName ; Returns the current cipher name of the SSL connection.
EventBufferEvent::sslGetCipherVersion ; Returns version of cipher used by current SSL connection.
EventBufferEvent::sslGetProtocol ; Returns the name of the protocol used for current SSL connection.
EventBufferEvent::sslRenegotiate ; Tells a bufferevent to begin SSL renegotiation.
EventBufferEvent::sslSocket ; Creates a new SSL buffer event to send its data over an SSL on a socket
EventBufferEvent::write ; Adds data to a buffer event's output buffer
EventBufferEvent::__construct ; Constructs EventBufferEvent object
EventConfig::avoidMethod ; Tells libevent to avoid specific event method
EventConfig::requireFeatures ; Enters a required event method feature that the application demands
EventConfig::setMaxDispatchInterval ; Prevents priority inversion
EventConfig::__construct ; Constructs EventConfig object
EventDnsBase::addNameserverIp ; Adds a nameserver to the DNS base
EventDnsBase::addSearch ; Adds a domain to the list of search domains
EventDnsBase::clearSearch ; Removes all current search suffixes
EventDnsBase::countNameservers ; Gets the number of configured nameservers
EventDnsBase::loadHosts ; Loads a hosts file (in the same format as /etc/hosts) from hosts file
EventDnsBase::parseResolvConf ; Scans the resolv.conf-formatted file
EventDnsBase::setOption ; Set the value of a configuration option
EventDnsBase::setSearchNdots ; Set the 'ndots' parameter for searches
EventDnsBase::__construct ; Constructs EventDnsBase object
EventHttp::accept ; Makes an HTTP server accept connections on the specified socket stream or resource
EventHttp::addServerAlias ; Adds a server alias to the HTTP server object
EventHttp::bind ; Binds an HTTP server on the specified address and port
EventHttp::removeServerAlias ; Removes server alias
EventHttp::setAllowedMethods ; Sets the what HTTP methods are supported in requests accepted by this server, and passed to user callbacks
EventHttp::setCallback ; Sets a callback for specified URI
EventHttp::setDefaultCallback ; Sets default callback to handle requests that are not caught by specific callbacks
EventHttp::setMaxBodySize ; Sets maximum request body size
EventHttp::setMaxHeadersSize ; Sets maximum HTTP header size
EventHttp::setTimeout ; Sets the timeout for an HTTP request
EventHttp::__construct ; Constructs EventHttp object(the HTTP server)
EventHttpConnection::getBase ; Returns event base associated with the connection
EventHttpConnection::getPeer ; Gets the remote address and port associated with the connection
EventHttpConnection::makeRequest ; Makes an HTTP request over the specified connection
EventHttpConnection::setCloseCallback ; Set callback for connection close
EventHttpConnection::setLocalAddress ; Sets the IP address from which HTTP connections are made
EventHttpConnection::setLocalPort ; Sets the local port from which connections are made
EventHttpConnection::setMaxBodySize ; Sets maximum body size for the connection
EventHttpConnection::setMaxHeadersSize ; Sets maximum header size
EventHttpConnection::setRetries ; Sets the retry limit for the connection
EventHttpConnection::setTimeout ; Sets the timeout for the connection
EventHttpConnection::__construct ; Constructs EventHttpConnection object
EventHttpRequest::addHeader ; Adds an HTTP header to the headers of the request
EventHttpRequest::cancel ; Cancels a pending HTTP request
EventHttpRequest::clearHeaders ; Removes all output headers from the header list of the request
EventHttpRequest::closeConnection ; Closes associated HTTP connection
EventHttpRequest::findHeader ; Finds the value belonging a header
EventHttpRequest::free ; Frees the object and removes associated events
EventHttpRequest::getBufferEvent ; Returns EventBufferEvent object
EventHttpRequest::getCommand ; Returns the request command(method)
EventHttpRequest::getConnection ; Returns EventHttpConnection object
EventHttpRequest::getHost ; Returns the request host
EventHttpRequest::getInputBuffer ; Returns the input buffer
EventHttpRequest::getInputHeaders ; Returns associative array of the input headers
EventHttpRequest::getOutputBuffer ; Returns the output buffer of the request
EventHttpRequest::getOutputHeaders ; Returns associative array of the input headers
EventHttpRequest::getResponseCode ; Returns the response code
EventHttpRequest::getUri ; Returns the request URI
EventHttpRequest::removeHeader ; Removes an HTTP header from the headers of the request
EventHttpRequest::sendError ; Send an HTML error message to the client
EventHttpRequest::sendReply ; Send an HTML reply to the client
EventHttpRequest::sendReplyChunk ; Send another data chunk as part of an ongoing chunked reply
EventHttpRequest::sendReplyEnd ; Complete a chunked reply, freeing the request as appropriate
EventHttpRequest::sendReplyStart ; Initiate a chunked reply
EventHttpRequest::__construct ; Constructs EventHttpRequest object
EventListener::disable ; Disables an event connect listener object
EventListener::enable ; Enables an event connect listener object
EventListener::getBase ; Returns event base associated with the event listener
EventListener::setCallback ; The setCallback purpose
EventListener::setErrorCallback ; Set event listener's error callback
EventListener::__construct ; Creates new connection listener associated with an event base
EventSslContext::__construct ; Constructs an OpenSSL context for use with Event classes
EventUtil::getLastSocketErrno ; Returns the most recent socket error number
EventUtil::getLastSocketError ; Returns the most recent socket error
EventUtil::getSocketFd ; Returns numeric file descriptor of a socket, or stream
EventUtil::setSocketOption ; Sets socket options
EventUtil::sslRandPoll ; Generates entropy by means of OpenSSL's RAND_poll()
EventUtil::__construct ; The abstract constructor
event_base_free ; Destroy event base
event_base_loop ; Handle events
event_base_loopbreak ; Abort event loop
event_base_loopexit ; Exit loop after a time
event_base_new ; Create and initialize new event base
event_base_priority_init ; Set the number of event priority levels
event_base_reinit ; Reinitialize the event base after a fork
event_base_set ; Associate event base with an event
event_buffer_base_set ; Associate buffered event with an event base
event_buffer_disable ; Disable a buffered event
event_buffer_enable ; Enable a buffered event
event_buffer_fd_set ; Change a buffered event file descriptor
event_buffer_free ; Destroy buffered event
event_buffer_new ; Create new buffered event
event_buffer_priority_set ; Assign a priority to a buffered event
event_buffer_read ; Read data from a buffered event
event_buffer_set_callback ; Set or reset callbacks for a buffered event
event_buffer_timeout_set ; Set read and write timeouts for a buffered event
event_buffer_watermark_set ; Set the watermarks for read and write events
event_buffer_write ; Write data to a buffered event
event_new ; Create new event
event_priority_set ; Assign a priority to an event.
event_timer_add ; 别名 event_add
event_timer_del ; 别名 event_del
event_timer_new ; 别名 event_new
event_timer_set ; Prepare a timer event
EvFork::createStopped ; Creates a stopped instance of EvFork watcher class
EvFork::__construct ; Constructs the EvFork watcher object
EvIdle::createStopped ; Creates instance of a stopped EvIdle watcher object
EvIdle::__construct ; Constructs the EvIdle watcher object
EvIo::createStopped ; Create stopped EvIo watcher object
EvIo::set ; Configures the watcher
EvIo::__construct ; Constructs EvIo watcher object
EvLoop::backend ; Returns an integer describing the backend used by libev.
EvLoop::child ; Creates EvChild object associated with the current event loop
EvLoop::defaultLoop ; Returns or creates the default event loop.
EvLoop::invokePending ; Invoke all pending watchers while resetting their pending state
EvLoop::loopFork ; Must be called after a fork
EvLoop::now ; Returns the current &quot;event loop time&quot;
EvLoop::resume ; Resume previously suspended default event loop
EvLoop::run ; Begin checking for events and calling callbacks for the loop
EvLoop::stop ; Stops the event loop
EvLoop::suspend ; Suspend the loop
EvLoop::verify ; Performs internal consistency checks(for debugging)
EvLoop::__construct ; Constructs the event loop object
EvPeriodic::again ; Simply stops and restarts the periodic watcher again.
EvPeriodic::createStopped ; Create a stopped EvPeriodic watcher
EvPeriodic::set ; Configures the watcher
EvPeriodic::__construct ; Constructs EvPeriodic watcher object
EvPrepare::createStopped ; Creates a stopped instance of EvPrepare watcher
EvPrepare::__construct ; Constructs EvPrepare watcher object
EvSignal::createStopped ; Create stopped EvSignal watcher object
EvSignal::set ; Configures the watcher
EvSignal::__construct ; Constructs EvPeriodic watcher object
EvStat::attr ; Returns the values most recently detected by Ev
EvStat::createStopped ; Create a stopped EvStat watcher object
EvStat::prev ; Returns the previous set of values returned by EvStat::attr
EvStat::set ; Configures the watcher
EvStat::stat ; Initiates the stat call
EvStat::__construct ; Constructs EvStat watcher object
EvTimer::again ; Restarts the timer watcher
EvTimer::createStopped ; Creates EvTimer stopped watcher object
EvTimer::set ; Configures the watcher
EvTimer::__construct ; Constructs an EvTimer watcher object
EvWatcher::clear ; Clear watcher pending status
EvWatcher::feed ; Feeds the given revents set into the event loop
EvWatcher::getLoop ; Returns the loop responsible for the watcher
EvWatcher::keepalive ; Configures whether to keep the loop from returning
EvWatcher::setCallback ; Sets new callback for the watcher
EvWatcher::start ; Starts the watcher
EvWatcher::stop ; Stops the watcher
EvWatcher::__construct ; Abstract constructor of a watcher object
Exception::getCode ; 获取异常代码
Exception::getFile ; 获取发生异常的程序文件名称
Exception::getLine ; 获取发生异常的代码在文件中的行号
Exception::getMessage ; 获取异常消息内容
Exception::getPrevious ; 返回异常链中的前一个异常
Exception::getTrace ; 获取异常追踪信息
Exception::getTraceAsString ; 获取字符串类型的异常追踪信息
Exception::__clone ; 异常克隆
Exception::__construct ; 异常构造函数
Exception::__toString ; 将异常对象转换为字符串
exec ; 执行一个外部程序
exif_imagetype ; 判断一个图像的类型
exif_tagname ; 获取指定索引的头名称
exif_thumbnail ; 取得嵌入在 TIFF 或 JPEG 图像中的缩略图
exit ; 输出一个消息并且退出当前脚本
exp ; 计算 e 的指数
expect:// ; 处理交互式的流
explode ; 使用一个字符串分割另一个字符串
expm1 ; 返回 exp(number) - 1，甚至当 number 的值接近零也能计算出准确结果
extension_loaded ; 检查一个扩展是否已经加载
extract ; 从数组中将变量导入到当前的符号表
ezmlm_hash ; 计算 EZMLM 所需的散列值
fastcgi_finish_request ; 冲刷(flush)所有响应的数据给客户端
fclose ; 关闭一个已打开的文件指针
feof ; 测试文件指针是否到了文件结束的位置
fflush ; 将缓冲内容输出到文件
fgetc ; 从文件指针中读取字符
fgetcsv ; 从文件指针中读入一行并解析 CSV 字段
fgets ; 从文件指针中读取一行
fgetss ; 从文件指针中读取一行并过滤掉 HTML 标记
file ; 把整个文件读入一个数组中
file:// ; 访问本地文件系统
fileatime ; 取得文件的上次访问时间
filectime ; 取得文件的 inode 修改时间
filegroup ; 取得文件的组
fileinode ; 取得文件的 inode
filemtime ; 取得文件修改时间
fileowner ; 取得文件的所有者
fileperms ; 取得文件的权限
filesize ; 取得文件大小
FilesystemIterator::current ; The current file
FilesystemIterator::getFlags ; Get the handling flags
FilesystemIterator::key ; Retrieve the key for the current file
FilesystemIterator::next ; Move to the next file
FilesystemIterator::rewind ; Rewinds back to the beginning
FilesystemIterator::setFlags ; Sets handling flags
FilesystemIterator::__construct ; Constructs a new filesystem iterator
filetype ; 取得文件类型
file_exists ; 检查文件或目录是否存在
file_get_contents ; 将整个文件读入一个字符串
file_put_contents ; 将一个字符串写入文件
FilterIterator::accept ; Check whether the current element of the iterator is acceptable
FilterIterator::current ; Get the current element value
FilterIterator::getInnerIterator ; Get the inner iterator
FilterIterator::key ; Get the current key
FilterIterator::next ; Move the iterator forward
FilterIterator::rewind ; Rewind the iterator
FilterIterator::valid ; Check whether the current element is valid
FilterIterator::__construct ; Construct a filterIterator
filter_has_var ; Checks if variable of specified type exists
filter_id ; 返回与某个特定名称的过滤器相关联的id
filter_input ; 通过名称获取特定的外部变量，并且可以通过过滤器处理它
filter_input_array ; 获取一系列外部变量，并且可以通过过滤器处理它们
filter_list ; 返回所支持的过滤器列表
filter_var ; 使用特定的过滤器过滤一个变量
filter_var_array ; 获取多个变量并且过滤它们
finfo_buffer ; 返回一个字符串缓冲区的信息
finfo_close ; 关闭 fileinfo 资源
finfo_file ; 返回一个文件的信息
finfo_open ; 创建一个 fileinfo 资源
finfo_set_flags ; 设置 libmagic 配置选项
floatval ; 获取变量的浮点值
flock ; 轻便的咨询文件锁定
floor ; 舍去法取整
flush ; 刷新输出缓冲
fmod ; 返回除法的浮点数余数
fnmatch ; 用模式匹配文件名
fopen ; 打开文件或者 URL
forward_static_call ; Call a static method
forward_static_call_array ; Call a static method and pass the arguments as array
fpassthru ; 输出文件指针处的所有剩余数据
fprintf ; 将格式化后的字符串写入到流
fputcsv ; 将行格式化为 CSV 并写入文件指针
fputs ; fwrite 的别名
fread ; 读取文件（可安全用于二进制文件）
FrenchToJD ; 从一个French Republican历法的日期得到Julian Day计数。
fscanf ; 从文件中格式化输入
fseek ; 在文件指针中定位
fsockopen ; 打开一个网络连接或者一个Unix套接字连接
fstat ; 通过已打开的文件指针取得文件信息
ftell ; 返回文件指针读/写的位置
ftok ; Convert a pathname and a project identifier to a System V IPC key
ftp:// ; 访问 FTP(s) URLs
FTP context options ; FTP context option listing
ftp_alloc ; 为要上传的文件分配空间
ftp_cdup ; 切换到当前目录的父目录
ftp_chdir ; 在 FTP 服务器上改变当前目录
ftp_chmod ; 设置 FTP 服务器上的文件权限
ftp_close ; 关闭一个 FTP 连接
ftp_connect ; 建立一个新的 FTP 连接
ftp_delete ; 删除 FTP 服务器上的一个文件
ftp_exec ; 请求运行一条 FTP 命令
ftp_fget ; 从 FTP 服务器上下载一个文件并保存到本地一个已经打开的文件中
ftp_fput ; 上传一个已经打开的文件到 FTP 服务器
ftp_get ; 从 FTP 服务器上下载一个文件
ftp_get_option ; 返回当前 FTP 连接的各种不同的选项设置
ftp_login ; 登录 FTP 服务器
ftp_mdtm ; 返回指定文件的最后修改时间
ftp_mkdir ; 建立新目录
ftp_nb_continue ; 连续获取／发送文件（non-blocking）
ftp_nb_fget ; 从 FTP 服务器获取文件并写入到一个打开的文件（非阻塞）
ftp_nb_fput ; 将文件存储到 FTP 服务器 （非阻塞）
ftp_nb_get ; 从 FTP 服务器上获取文件并写入本地文件（non-blocking）
ftp_nb_put ; 存储一个文件至 FTP 服务器（non-blocking）
ftp_nlist ; 返回给定目录的文件列表
ftp_pasv ; 返回当前 FTP 被动模式是否打开
ftp_put ; 上传文件到 FTP 服务器
ftp_pwd ; 返回当前目录名
ftp_quit ; ftp_close 的 别名
ftp_raw ; 向 FTP 服务器发送命令
ftp_rawlist ; 返回指定目录下文件的详细列表
ftp_rename ; 更改 FTP 服务器上的文件或目录名
ftp_rmdir ; 删除 FTP 服务器上的一个目录
ftp_set_option ; 设置各种 FTP 运行时选项
ftp_site ; 向服务器发送 SITE 命令
ftp_size ; 返回指定文件的大小
ftp_ssl_connect ; 打开 SSL-FTP 连接
ftp_systype ; 返回远程 FTP 服务器的操作系统类型
ftruncate ; 将文件截断到给定的长度
function_exists ; 如果给定的函数已经被定义就返回 TRUE
func_get_arg ; 返回参数列表的某一项
func_get_args ; 返回一个包含函数参数列表的数组
func_num_args ; Returns the number of arguments passed to the function
fwrite ; 写入文件（可安全用于二进制文件）
gc_collect_cycles ; 强制收集所有现存的垃圾循环周期
gc_disable ; 停用循环引用收集器
gc_enable ; 激活循环引用收集器
gc_enabled ; 返回循环引用计数器的状态
geoip_asnum_by_name ; Get the Autonomous System Numbers (ASN)
geoip_continent_code_by_name ; Get the two letter continent code
geoip_country_code3_by_name ; Get the three letter country code
geoip_country_code_by_name ; Get the two letter country code
geoip_country_name_by_name ; Get the full country name
geoip_database_info ; Get GeoIP Database information
geoip_db_avail ; Determine if GeoIP Database is available
geoip_db_filename ; Returns the filename of the corresponding GeoIP Database
geoip_db_get_all_info ; Returns detailed information about all GeoIP database types
geoip_domain_by_name ; Get the second level domain name
geoip_id_by_name ; Get the Internet connection type
geoip_isp_by_name ; Get the Internet Service Provider (ISP) name
geoip_netspeedcell_by_name ; Get the Internet connection speed
geoip_org_by_name ; Get the organization name
geoip_record_by_name ; Returns the detailed City information found in the GeoIP Database
geoip_region_by_name ; Get the country code and region
geoip_region_name_by_code ; Returns the region name for some country and region code combo
geoip_setup_custom_directory ; Set a custom directory for the GeoIP database.
geoip_time_zone_by_country_and_region ; Returns the time zone for some country and region code combo
getallheaders ; 获取全部 HTTP 请求头信息
getcwd ; 取得当前工作目录
getdate ; 取得日期／时间信息
getenv ; 获取一个环境变量的值
gethostbyaddr ; 获取指定的IP地址对应的主机名
gethostbyname ; Get the IPv4 address corresponding to a given Internet host name
gethostname ; Gets the host name
getlastmod ; 获取页面最后修改的时间
getmxrr ; Get MX records corresponding to a given Internet host name
getmygid ; 获取当前 PHP 脚本拥有者的 GID
getmyinode ; 获取当前脚本的索引节点（inode）
getmypid ; 获取 PHP 进程的 ID
getmyuid ; 获取 PHP 脚本所有者的 UID
getopt ; 从命令行参数列表中获取选项
getprotobyname ; Get protocol number associated with protocol name
getprotobynumber ; Get protocol name associated with protocol number
getrandmax ; 显示随机数最大的可能值
getrusage ; 获取当前资源使用状况
getservbyname ; Get port number associated with an Internet service and protocol
getservbyport ; Get Internet service which corresponds to port and protocol
gettext ; Lookup a message in the current domain
gettimeofday ; 取得当前时间
gettype ; 获取变量的类型
get_browser ; 获取浏览器具有的功能
get_called_class ; 后期静态绑定（&quot;Late Static Binding&quot;）类的名称
get_cfg_var ; 获取 PHP 配置选项的值
get_class ; 返回对象的类名
get_class_methods ; 返回由类的方法名组成的数组
get_class_vars ; 返回由类的默认属性组成的数组
get_current_user ; 获取当前 PHP 脚本所有者名称
get_declared_classes ; 返回由已定义类的名字所组成的数组
get_declared_interfaces ; 返回一个数组包含所有已声明的接口
get_declared_traits ; 返回所有已定义的 traits 的数组
get_defined_constants ; 返回所有常量的关联数组，键是常量名，值是常量值
get_defined_functions ; Returns an array of all defined functions
get_defined_vars ; 返回由所有已定义变量所组成的数组
get_extension_funcs ; 返回模块函数名称的数组
get_headers ; 取得服务器响应一个 HTTP 请求所发送的所有标头
get_html_translation_table ; 返回使用 htmlspecialchars 和 htmlentities 后的转换表
get_included_files ; 返回被 include 和 require 文件名的 array
get_include_path ; 获取当前的 include_path 配置选项
get_loaded_extensions ; 返回所有编译并加载模块名的 array
get_magic_quotes_gpc ; 获取当前 magic_quotes_gpc 的配置选项设置
get_magic_quotes_runtime ; 获取当前 magic_quotes_runtime 配置选项的激活状态
get_meta_tags ; 从一个文件中提取所有的 meta 标签 content 属性，返回一个数组
get_object_vars ; 返回由对象属性组成的关联数组
get_parent_class ; 返回对象或类的父类名
get_required_files ; 别名 get_included_files
get_resource_type ; 返回资源（resource）类型
glob ; 寻找与模式匹配的文件路径
glob:// ; 查找匹配的文件路径模式
GlobIterator::count ; Get the number of directories and files
GlobIterator::__construct ; Construct a directory using glob
Gmagick::addimage ; Adds new image to Gmagick object image list
Gmagick::addnoiseimage ; Adds random noise to the image
Gmagick::annotateimage ; Annotates an image with text
Gmagick::blurimage ; Adds blur filter to image
Gmagick::borderimage ; Surrounds the image with a border
Gmagick::charcoalimage ; Simulates a charcoal drawing
Gmagick::chopimage ; Removes a region of an image and trims
Gmagick::clear ; Clears all resources associated to Gmagick object
Gmagick::commentimage ; Adds a comment to your image
Gmagick::compositeimage ; Composite one image onto another
Gmagick::cropimage ; Extracts a region of the image
Gmagick::cropthumbnailimage ; Creates a crop thumbnail
Gmagick::current ; The current purpose
Gmagick::cyclecolormapimage ; Displaces an image's colormap
Gmagick::deconstructimages ; Returns certain pixel differences between images
Gmagick::despeckleimage ; The despeckleimage purpose
Gmagick::destroy ; The destroy purpose
Gmagick::drawimage ; Renders the GmagickDraw object on the current image
Gmagick::edgeimage ; Enhance edges within the image
Gmagick::embossimage ; Returns a grayscale image with a three-dimensional effect
Gmagick::enhanceimage ; Improves the quality of a noisy image
Gmagick::equalizeimage ; Equalizes the image histogram
Gmagick::flipimage ; Creates a vertical mirror image
Gmagick::flopimage ; The flopimage purpose
Gmagick::frameimage ; Adds a simulated three-dimensional border
Gmagick::gammaimage ; Gamma-corrects an image
Gmagick::getcopyright ; Returns the GraphicsMagick API copyright as a string
Gmagick::getfilename ; The filename associated with an image sequence
Gmagick::getimagebackgroundcolor ; Returns the image background color
Gmagick::getimageblueprimary ; Returns the chromaticy blue primary point
Gmagick::getimagebordercolor ; Returns the image border color
Gmagick::getimagechanneldepth ; Gets the depth for a particular image channel
Gmagick::getimagecolors ; Returns the color of the specified colormap index
Gmagick::getimagecolorspace ; Gets the image colorspace
Gmagick::getimagecompose ; Returns the composite operator associated with the image
Gmagick::getimagedelay ; Gets the image delay
Gmagick::getimagedepth ; Gets the depth of the image
Gmagick::getimagedispose ; Gets the image disposal method
Gmagick::getimageextrema ; Gets the extrema for the image
Gmagick::getimagefilename ; Returns the filename of a particular image in a sequence
Gmagick::getimageformat ; Returns the format of a particular image in a sequence
Gmagick::getimagegamma ; Gets the image gamma
Gmagick::getimagegreenprimary ; Returns the chromaticy green primary point
Gmagick::getimageheight ; Returns the image height
Gmagick::getimagehistogram ; Gets the image histogram
Gmagick::getimageindex ; Gets the index of the current active image
Gmagick::getimageinterlacescheme ; Gets the image interlace scheme
Gmagick::getimageiterations ; Gets the image iterations
Gmagick::getimagematte ; Check if the image has a matte channel
Gmagick::getimagemattecolor ; Returns the image matte color
Gmagick::getimageprofile ; Returns the named image profile.
Gmagick::getimageredprimary ; Returns the chromaticity red primary point
Gmagick::getimagerenderingintent ; Gets the image rendering intent
Gmagick::getimageresolution ; Gets the image X and Y resolution
Gmagick::getimagescene ; Gets the image scene
Gmagick::getimagesignature ; Generates an SHA-256 message digest
Gmagick::getimagetype ; Gets the potential image type.
Gmagick::getimageunits ; Gets the image units of resolution
Gmagick::getimagewhitepoint ; Returns the chromaticity white point
Gmagick::getimagewidth ; Returns the width of the image
Gmagick::getpackagename ; Returns the GraphicsMagick package name.
Gmagick::getquantumdepth ; Returns the Gmagick quantum depth as a string.
Gmagick::getreleasedate ; Returns the GraphicsMagick release date as a string.
Gmagick::getsamplingfactors ; Gets the horizontal and vertical sampling factor.
Gmagick::getsize ; Returns the size associated with the Gmagick object
Gmagick::getversion ; Returns the GraphicsMagick API version
Gmagick::hasnextimage ; Checks if the object has more images
Gmagick::haspreviousimage ; Checks if the object has a previous image
Gmagick::implodeimage ; Creates a new image as a copy
Gmagick::labelimage ; Adds a label to an image.
Gmagick::levelimage ; Adjusts the levels of an image
Gmagick::magnifyimage ; Scales an image proportionally 2x
Gmagick::mapimage ; Replaces the colors of an image with the closest color from a reference image.
Gmagick::medianfilterimage ; Applies a digital filter
Gmagick::minifyimage ; Scales an image proportionally to half its size
Gmagick::modulateimage ; Control the brightness, saturation, and hue
Gmagick::motionblurimage ; Simulates motion blur
Gmagick::newimage ; Creates a new image
Gmagick::nextimage ; Moves to the next image
Gmagick::normalizeimage ; Enhances the contrast of a color image
Gmagick::oilpaintimage ; Simulates an oil painting
Gmagick::previousimage ; Move to the previous image in the object
Gmagick::profileimage ; Adds or removes a profile from an image
Gmagick::quantizeimage ; Analyzes the colors within a reference image
Gmagick::quantizeimages ; The quantizeimages purpose
Gmagick::queryfontmetrics ; Returns an array representing the font metrics
Gmagick::queryfonts ; Returns the configured fonts
Gmagick::queryformats ; Returns formats supported by Gmagick.
Gmagick::radialblurimage ; Radial blurs an image
Gmagick::raiseimage ; Creates a simulated 3d button-like effect
Gmagick::read ; Reads image from filename
Gmagick::readimage ; Reads image from filename
Gmagick::readimageblob ; Reads image from a binary string
Gmagick::readimagefile ; The readimagefile purpose
Gmagick::reducenoiseimage ; Smooths the contours of an image
Gmagick::removeimage ; Removes an image from the image list
Gmagick::removeimageprofile ; Removes the named image profile and returns it
Gmagick::resampleimage ; Resample image to desired resolution
Gmagick::resizeimage ; Scales an image
Gmagick::rollimage ; Offsets an image
Gmagick::rotateimage ; Rotates an image
Gmagick::scaleimage ; Scales the size of an image
Gmagick::separateimagechannel ; Separates a channel from the image
Gmagick::setfilename ; Sets the filename before you read or write the image
Gmagick::setimagebackgroundcolor ; Sets the image background color.
Gmagick::setimageblueprimary ; Sets the image chromaticity blue primary point.
Gmagick::setimagebordercolor ; Sets the image border color.
Gmagick::setimagechanneldepth ; Sets the depth of a particular image channel
Gmagick::setimagecolorspace ; Sets the image colorspace
Gmagick::setimagecompose ; Sets the image composite operator
Gmagick::setimagedelay ; Sets the image delay
Gmagick::setimagedepth ; Sets the image depth
Gmagick::setimagedispose ; Sets the image disposal method
Gmagick::setimagefilename ; Sets the filename of a particular image in a sequence
Gmagick::setimageformat ; Sets the format of a particular image
Gmagick::setimagegamma ; Sets the image gamma
Gmagick::setimagegreenprimary ; TSets the image chromaticity green primary point.
Gmagick::setimageindex ; Set the iterator to the position in the image list specified with the index parameter
Gmagick::setimageinterlacescheme ; Sets the interlace scheme of the image.
Gmagick::setimageiterations ; Sets the image iterations.
Gmagick::setimageprofile ; Adds a named profile to the Gmagick object
Gmagick::setimageredprimary ; Sets the image chromaticity red primary point.
Gmagick::setimagerenderingintent ; Sets the image rendering intent
Gmagick::setimageresolution ; Sets the image resolution
Gmagick::setimagescene ; Sets the image scene
Gmagick::setimagetype ; Sets the image type
Gmagick::setimageunits ; Sets the image units of resolution.
Gmagick::setimagewhitepoint ; Sets the image chromaticity white point.
Gmagick::setsamplingfactors ; Sets the image sampling factors.
Gmagick::setsize ; Sets the size of the Gmagick object
Gmagick::shearimage ; Creating a parallelogram
Gmagick::solarizeimage ; Applies a solarizing effect to the image
Gmagick::spreadimage ; Randomly displaces each pixel in a block
Gmagick::stripimage ; Strips an image of all profiles and comments
Gmagick::swirlimage ; Swirls the pixels about the center of the image
Gmagick::thumbnailimage ; Changes the size of an image
Gmagick::trimimage ; Remove edges from the image
Gmagick::write ; Writes an image to the specified filename
Gmagick::writeimage ; Writes an image to the specified filename
Gmagick::__construct ; The Gmagick constructor
GmagickDraw::annotate ; Draws text on the image
GmagickDraw::arc ; Draws an arc
GmagickDraw::bezier ; Draws a bezier curve
GmagickDraw::ellipse ; Draws an ellipse on the image
GmagickDraw::getfillcolor ; Returns the fill color
GmagickDraw::getfillopacity ; Returns the opacity used when drawing
GmagickDraw::getfont ; Returns the font
GmagickDraw::getfontsize ; Returns the font pointsize
GmagickDraw::getfontstyle ; Returns the font style
GmagickDraw::getfontweight ; Returns the font weight
GmagickDraw::getstrokecolor ; Returns the color used for stroking object outlines
GmagickDraw::getstrokeopacity ; Returns the opacity of stroked object outlines
GmagickDraw::getstrokewidth ; Returns the width of the stroke used to draw object outlines
GmagickDraw::gettextdecoration ; Returns the text decoration
GmagickDraw::gettextencoding ; Returns the code set used for text annotations
GmagickDraw::line ; The line purpose
GmagickDraw::point ; Draws a point
GmagickDraw::polygon ; Draws a polygon
GmagickDraw::polyline ; Draws a polyline
GmagickDraw::rectangle ; Draws a rectangle
GmagickDraw::rotate ; Applies the specified rotation to the current coordinate space
GmagickDraw::roundrectangle ; Draws a rounded rectangle
GmagickDraw::scale ; Adjusts the scaling factor
GmagickDraw::setfillcolor ; Sets the fill color to be used for drawing filled objects.
GmagickDraw::setfillopacity ; The setfillopacity purpose
GmagickDraw::setfont ; Sets the fully-specified font to use when annotating with text.
GmagickDraw::setfontsize ; Sets the font pointsize to use when annotating with text.
GmagickDraw::setfontstyle ; Sets the font style to use when annotating with text
GmagickDraw::setfontweight ; Sets the font weight
GmagickDraw::setstrokecolor ; Sets the color used for stroking object outlines.
GmagickDraw::setstrokeopacity ; Specifies the opacity of stroked object outlines.
GmagickDraw::setstrokewidth ; Sets the width of the stroke used to draw object outlines.
GmagickDraw::settextdecoration ; Specifies a decoration
GmagickDraw::settextencoding ; Specifies the text code set
GmagickPixel::getcolor ; Returns the color
GmagickPixel::getcolorcount ; Returns the color count associated with this color
GmagickPixel::getcolorvalue ; Gets the normalized value of the provided color channel
GmagickPixel::setcolor ; Sets the color
GmagickPixel::setcolorvalue ; Sets the normalized value of one of the channels
GmagickPixel::__construct ; The GmagickPixel constructor
gmdate ; 格式化一个 GMT/UTC 日期／时间
gmmktime ; 取得 GMT 日期的 UNIX 时间戳
gmp_abs ; Absolute value
gmp_add ; Add numbers
gmp_and ; Bitwise AND
gmp_clrbit ; Clear bit
gmp_cmp ; Compare numbers
gmp_com ; Calculates one's complement
gmp_div ; 别名 gmp_div_q
gmp_divexact ; Exact division of numbers
gmp_div_q ; Divide numbers
gmp_div_qr ; Divide numbers and get quotient and remainder
gmp_div_r ; Remainder of the division of numbers
gmp_export ; Export to a binary string
gmp_fact ; Factorial
gmp_gcd ; Calculate GCD
gmp_gcdext ; Calculate GCD and multipliers
gmp_hamdist ; Hamming distance
gmp_import ; Import from a binary string
gmp_init ; Create GMP number
gmp_intval ; Convert GMP number to integer
gmp_invert ; Inverse by modulo
gmp_jacobi ; Jacobi symbol
gmp_legendre ; Legendre symbol
gmp_mod ; Modulo operation
gmp_mul ; Multiply numbers
gmp_neg ; Negate number
gmp_nextprime ; Find next prime number
gmp_or ; Bitwise OR
gmp_perfect_square ; Perfect square check
gmp_popcount ; Population count
gmp_pow ; Raise number into power
gmp_powm ; Raise number into power with modulo
gmp_prob_prime ; Check if number is &quot;probably prime&quot;
gmp_random ; Random number
gmp_random_bits ; Random number
gmp_random_range ; Random number
gmp_random_seed ; Sets the RNG seed
gmp_root ; Take the integer part of nth root
gmp_rootrem ; Take the integer part and remainder of nth root
gmp_scan0 ; Scan for 0
gmp_scan1 ; Scan for 1
gmp_setbit ; Set bit
gmp_sign ; Sign of number
gmp_sqrt ; Calculate square root
gmp_sqrtrem ; Square root with remainder
gmp_strval ; Convert GMP number to string
gmp_sub ; Subtract numbers
gmp_testbit ; Tests if a bit is set
gmp_xor ; Bitwise XOR
gmstrftime ; 根据区域设置格式化 GMT/UTC 时间／日期
gnupg_adddecryptkey ; Add a key for decryption
gnupg_addencryptkey ; Add a key for encryption
gnupg_addsignkey ; Add a key for signing
gnupg_cleardecryptkeys ; Removes all keys which were set for decryption before
gnupg_clearencryptkeys ; Removes all keys which were set for encryption before
gnupg_clearsignkeys ; Removes all keys which were set for signing before
gnupg_decrypt ; Decrypts a given text
gnupg_decryptverify ; Decrypts and verifies a given text
gnupg_encrypt ; Encrypts a given text
gnupg_encryptsign ; Encrypts and signs a given text
gnupg_export ; Exports a key
gnupg_geterror ; Returns the errortext, if a function fails
gnupg_getprotocol ; Returns the currently active protocol for all operations
gnupg_import ; Imports a key
gnupg_init ; Initialize a connection
gnupg_keyinfo ; Returns an array with information about all keys that matches the given pattern
gnupg_setarmor ; Toggle armored output
gnupg_seterrormode ; Sets the mode for error_reporting
gnupg_setsignmode ; Sets the mode for signing
gnupg_sign ; Signs a given text
gnupg_verify ; Verifies a signed text
gopher_parsedir ; Translate a gopher formatted directory entry into an associative array.
GregorianToJD ; 转变一个Gregorian历法日期到Julian Day计数
gzclose ; Close an open gz-file pointer
gzcompress ; Compress a string
gzdecode ; Decodes a gzip compressed string
gzdeflate ; Deflate a string
gzencode ; Create a gzip compressed string
gzeof ; Test for EOF on a gz-file pointer
gzfile ; Read entire gz-file into an array
gzgetc ; Get character from gz-file pointer
gzgets ; Get line from file pointer
gzgetss ; Get line from gz-file pointer and strip HTML tags
gzinflate ; Inflate a deflated string
gzopen ; Open gz-file
gzpassthru ; Output all remaining data on a gz-file pointer
gzputs ; 别名 gzwrite
gzread ; Binary-safe gz-file read
gzrewind ; Rewind the position of a gz-file pointer
gzseek ; Seek on a gz-file pointer
gztell ; Tell gz-file pointer read/write position
gzuncompress ; Uncompress a compressed string
gzwrite ; Binary-safe gz-file write
hash ; 生成哈希值 （消息摘要）
hash_algos ; 返回已注册的哈希算法列表
hash_copy ; 拷贝哈希运算上下文
hash_equals ; 可防止时序攻击的字符串比较
hash_file ; 使用给定文件的内容生成哈希值
hash_final ; 结束增量哈希，并且返回摘要结果
hash_hmac ; 使用 HMAC 方法生成带有密钥的哈希值
hash_hmac_file ; 使用 HMAC 方法和给定文件的内容生成带密钥的哈希值
hash_init ; 初始化增量哈希运算上下文
hash_pbkdf2 ; 生成所提供密码的 PBKDF2 密钥导出
hash_update ; 向活跃的哈希运算上下文中填充数据
hash_update_file ; 从文件向活跃的哈希运算上下文中填充数据
hash_update_stream ; 从打开的流向活跃的哈希运算上下文中填充数据
header ; 发送原生 HTTP 头
headers_list ; Returns a list of response headers sent (or ready to send)
headers_sent ; Checks if or where headers have been sent
header_register_callback ; Call a header function
header_remove ; Remove previously set headers
hebrev ; 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew）
hebrevc ; 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew），并且转换换行符
hex2bin ; 转换十六进制字符串为二进制字符串
hexdec ; 十六进制转换为十进制
highlight_file ; 语法高亮一个文件
highlight_string ; 字符串的语法高亮
htmlentities ; Convert all applicable characters to HTML entities
htmlspecialchars ; Convert special characters to HTML entities
htmlspecialchars_decode ; 将特殊的 HTML 实体转换回普通字符
html_entity_decode ; Convert all HTML entities to their applicable characters
http:// ; 访问 HTTP(s) 网址
http_build_cookie ; Build cookie string
http_build_query ; 生成 URL-encode 之后的请求字符串
http_build_str ; 产生一个查询字符串
http_build_url ; 产生一个 URL
http_cache_etag ; Caching by ETag
http_cache_last_modified ; Caching by last modification
http_chunked_decode ; Decode chunked-encoded data
http_date ; Compose HTTP RFC compliant date
http_deflate ; Deflate data
http_get ; Perform GET request
http_get_request_body ; Get request body as string
http_get_request_body_stream ; Get request body as stream
http_get_request_headers ; Get request headers as array
http_head ; Perform HEAD request
http_inflate ; Inflate data
http_match_etag ; Match ETag
http_match_modified ; Match last modification
http_match_request_header ; Match any header
http_negotiate_charset ; Negotiate client's preferred character set
http_negotiate_content_type ; Negotiate client's preferred content type
http_negotiate_language ; Negotiate client's preferred language
http_parse_cookie ; Parse HTTP cookie
http_parse_headers ; Parse HTTP headers
http_parse_message ; Parse HTTP messages
http_parse_params ; Parse parameter list
http_persistent_handles_clean ; Clean up persistent handles
http_persistent_handles_count ; Stat persistent handles
http_persistent_handles_ident ; Get/set ident of persistent handles
http_post_data ; Perform POST request with pre-encoded data
http_post_fields ; Perform POST request with data to be encoded
http_put_data ; Perform PUT request with data
http_put_file ; Perform PUT request with file
http_put_stream ; Perform PUT request with stream
http_redirect ; Issue HTTP redirect
http_request ; Perform custom request
http_request_body_encode ; Encode request body
http_request_method_exists ; Check whether request method exists
http_request_method_name ; Get request method name
http_request_method_register ; Register request method
http_request_method_unregister ; Unregister request method
http_response_code ; Get or Set the HTTP response code
http_send_content_disposition ; Send Content-Disposition
http_send_content_type ; Send Content-Type
http_send_data ; Send arbitrary data
http_send_file ; Send file
http_send_last_modified ; Send Last-Modified
http_send_status ; Send HTTP response status
http_send_stream ; Send stream
http_support ; Check built-in HTTP support
http_throttle ; HTTP throttling
hypot ; 计算一直角三角形的斜边长度
iconv ; 字符串按要求的字符编码来转换
iconv_get_encoding ; 获取 iconv 扩展的内部配置变量
iconv_mime_decode ; Decodes a MIME header field
iconv_mime_decode_headers ; 一次性解码多个 MIME 头字段
iconv_mime_encode ; Composes a MIME header field
iconv_set_encoding ; 为字符编码转换设定当前设置
iconv_strlen ; 返回字符串的字符数统计
iconv_strpos ; Finds position of first occurrence of a needle within a haystack
iconv_strrpos ; Finds the last occurrence of a needle within a haystack
iconv_substr ; 截取字符串的部分
idate ; 将本地时间日期格式化为整数
ignore_user_abort ; 设置客户端断开连接时是否中断脚本的执行
implode ; 将一个一维数组的值转化为字符串
import_request_variables ; 将 GET／POST／Cookie 变量导入到全局作用域中
inclued_get_data ; Get the inclued data
inet_ntop ; Converts a packed internet address to a human readable representation
inet_pton ; Converts a human readable IP address to its packed in_addr representation
InfiniteIterator::next ; Moves the inner Iterator forward or rewinds it
InfiniteIterator::__construct ; Constructs an InfiniteIterator
ini_alter ; 别名 ini_set
ini_get ; 获取一个配置选项的值
ini_get_all ; 获取所有配置选项
ini_restore ; 恢复配置选项的值
ini_set ; 为一个配置选项设置值
inotify_add_watch ; Add a watch to an initialized inotify instance
inotify_init ; Initialize an inotify instance
inotify_queue_len ; Return a number upper than zero if there are pending events
inotify_read ; Read events from an inotify instance
inotify_rm_watch ; Remove an existing watch from an inotify instance
intdiv ; Integer division
interface_exists ; 检查接口是否已被定义
intval ; 获取变量的整数值
in_array ; 检查数组中是否存在某个值
ip2long ; 将一个IPV4的字符串互联网协议转换成数字格式
isset ; 检测变量是否设置
is_a ; 如果对象属于该类或该类是此对象的父类则返回 TRUE
is_array ; 检测变量是否是数组
is_bool ; 检测变量是否是布尔型
is_callable ; 检测参数是否为合法的可调用结构
is_dir ; 判断给定文件名是否是一个目录
is_double ; is_float 的别名
is_executable ; 判断给定文件名是否可执行
is_file ; 判断给定文件名是否为一个正常的文件
is_finite ; 判断是否为有限值
is_float ; 检测变量是否是浮点型
is_infinite ; 判断是否为无限值
is_int ; 检测变量是否是整数
is_integer ; is_int 的别名
is_link ; 判断给定文件名是否为一个符号连接
is_long ; is_int 的别名
is_nan ; 判断是否为合法数值
is_null ; 检测变量是否为 NULL
is_numeric ; 检测变量是否为数字或数字字符串
is_object ; 检测变量是否是一个对象
is_readable ; 判断给定文件名是否可读
is_real ; is_float 的别名
is_resource ; 检测变量是否为资源类型
is_scalar ; 检测变量是否是一个标量
is_soap_fault ; Checks if a SOAP call has failed
is_string ; 检测变量是否是字符串
is_subclass_of ; 如果此对象是该类的子类，则返回 TRUE
is_tainted ; Checks whether a string is tainted
is_uploaded_file ; 判断文件是否是通过 HTTP POST 上传的
is_writable ; 判断给定的文件名是否可写
is_writeable ; is_writable 的别名
Iterator::current ; 返回当前元素
Iterator::key ; 返回当前元素的键
Iterator::next ; 向前移动到下一个元素
Iterator::rewind ; 返回到迭代器的第一个元素
Iterator::valid ; 检查当前位置是否有效
IteratorAggregate::getIterator ; 获取一个外部迭代器
IteratorIterator::current ; Get the current value
IteratorIterator::getInnerIterator ; Get the inner iterator
IteratorIterator::key ; Get the key of the current element
IteratorIterator::next ; Forward to the next element
IteratorIterator::rewind ; Rewind to the first element
IteratorIterator::valid ; Checks if the iterator is valid
IteratorIterator::__construct ; Create an iterator from anything that is traversable
iterator_apply ; 为迭代器中每个元素调用一个用户自定义函数
iterator_count ; 计算迭代器中元素的个数
iterator_to_array ; 将迭代器中的元素拷贝到数组
JDDayOfWeek ; 返回星期的日期
JDMonthName ; 返回月份的名称
JDToFrench ; 转变一个Julian Day计数到French Republican历法的日期
JDToGregorian ; 转变一个Julian Day计数为Gregorian历法日期
jdtojewish ; 转换一个julian天数为Jewish历法的日期
JDToJulian ; 转变一个Julian Day计数到Julian历法的日期
jdtounix ; 转变Julian Day计数为一个Unix时间戳
JewishToJD ; 转变一个Jewish历法的日期为一个Julian Day计数
join ; 别名 implode
JsonSerializable::jsonSerialize ; 指定需要被序列化成 JSON 的数据
json_decode ; 对 JSON 格式的字符串进行编码
json_encode ; 对变量进行 JSON 编码
json_last_error ; 返回最后发生的错误
json_last_error_msg ; Returns the error string of the last json_encode() or json_decode() call
JulianToJD ; 转变一个Julian历法的日期为Julian Day计数
key ; 从关联数组中取得键名
key_exists ; 别名 array_key_exists
krsort ; 对数组按照键名逆向排序
ksort ; 对数组按照键名排序
lcfirst ; 使一个字符串的第一个字符小写
lcg_value ; 组合线性同余发生器
lchgrp ; Changes group ownership of symlink
lchown ; Changes user ownership of symlink
ldap_8859_to_t61 ; Translate 8859 characters to t61 characters
ldap_add ; Add entries to LDAP directory
ldap_bind ; 绑定 LDAP 目录
ldap_close ; 别名 ldap_unbind
ldap_compare ; Compare value of attribute found in entry specified with DN
ldap_connect ; Connect to an LDAP server
ldap_control_paged_result ; Send LDAP pagination control
ldap_control_paged_result_response ; Retrieve the LDAP pagination cookie
ldap_count_entries ; Count the number of entries in a search
ldap_delete ; Delete an entry from a directory
ldap_dn2ufn ; Convert DN to User Friendly Naming format
ldap_err2str ; Convert LDAP error number into string error message
ldap_errno ; Return the LDAP error number of the last LDAP command
ldap_error ; Return the LDAP error message of the last LDAP command
ldap_escape ; Escape a string for use in an LDAP filter or DN
ldap_explode_dn ; Splits DN into its component parts
ldap_first_attribute ; Return first attribute
ldap_first_entry ; Return first result id
ldap_first_reference ; Return first reference
ldap_free_result ; Free result memory
ldap_get_attributes ; Get attributes from a search result entry
ldap_get_dn ; Get the DN of a result entry
ldap_get_entries ; Get all result entries
ldap_get_option ; Get the current value for given option
ldap_get_values ; Get all values from a result entry
ldap_get_values_len ; Get all binary values from a result entry
ldap_list ; Single-level search
ldap_modify ; Modify an LDAP entry
ldap_modify_batch ; Batch and execute modifications on an LDAP entry
ldap_mod_add ; Add attribute values to current attributes
ldap_mod_del ; Delete attribute values from current attributes
ldap_mod_replace ; Replace attribute values with new ones
ldap_next_attribute ; Get the next attribute in result
ldap_next_entry ; Get next result entry
ldap_next_reference ; Get next reference
ldap_parse_reference ; Extract information from reference entry
ldap_parse_result ; Extract information from result
ldap_read ; Read an entry
ldap_rename ; Modify the name of an entry
ldap_sasl_bind ; Bind to LDAP directory using SASL
ldap_search ; Search LDAP tree
ldap_set_option ; Set the value of the given option
ldap_set_rebind_proc ; Set a callback function to do re-binds on referral chasing
ldap_sort ; Sort LDAP result entries
ldap_start_tls ; Start TLS
ldap_t61_to_8859 ; Translate t61 characters to 8859 characters
ldap_unbind ; Unbind from LDAP directory
levenshtein ; 计算两个字符串之间的编辑距离
libxml_clear_errors ; Clear libxml error buffer
libxml_disable_entity_loader ; Disable the ability to load external entities
libxml_get_errors ; Retrieve array of errors
libxml_get_last_error ; Retrieve last error from libxml
libxml_set_external_entity_loader ; Changes the default external entity loader
libxml_set_streams_context ; Set the streams context for the next libxml document load or write
libxml_use_internal_errors ; Disable libxml errors and allow user to fetch error information as needed
LimitIterator::current ; Get current element
LimitIterator::getInnerIterator ; Get inner iterator
LimitIterator::getPosition ; Return the current position
LimitIterator::key ; Get current key
LimitIterator::next ; Move the iterator forward
LimitIterator::rewind ; Rewind the iterator to the specified starting offset
LimitIterator::seek ; Seek to the given position
LimitIterator::valid ; Check whether the current element is valid
LimitIterator::__construct ; Construct a LimitIterator
link ; 建立一个硬连接
linkinfo ; 获取一个连接的信息
list ; 把数组中的值赋给一些变量
localeconv ; Get numeric formatting information
localtime ; 取得本地时间
log ; 自然对数
log1p ; 返回 log(1 + number)，甚至当 number 的值接近零也能计算出准确结果
log10 ; 以 10 为底的对数
long2ip ; Converts an (IPv4) Internet network address into a string in Internet standard dotted format
lstat ; 给出一个文件或符号连接的信息
ltrim ; 删除字符串开头的空白字符（或其他字符）
Lua::assign ; 将一个php变量赋值给Lua
Lua::call ; 调用Lua函数
Lua::eval ; 将字符串当做Lua代码执行
Lua::getVersion ; 获取Lua版本
Lua::include ; 解析Lua脚本文件
Lua::registerCallback ; 向Lua中注册php函数
Lua::__construct ; Lua 构造方法
LuaClosure::__invoke ; 调用luaclosure
lzf_compress ; LZF compression
lzf_decompress ; LZF decompression
lzf_optimized_for ; Determines what LZF extension was optimized for
magic_quotes_runtime ; 别名 set_magic_quotes_runtime
mail ; 发送邮件
main ; 虚拟的main
max ; 找出最大值
mb_check_encoding ; 检查字符串在指定的编码里是否有效
mb_convert_case ; 对字符串进行大小写转换
mb_convert_encoding ; 转换字符的编码
mb_convert_kana ; Convert &quot;kana&quot; one from another (&quot;zen-kaku&quot;, &quot;han-kaku&quot; and more)
mb_convert_variables ; 转换一个或多个变量的字符编码
mb_decode_mimeheader ; 解码 MIME 头字段中的字符串
mb_decode_numericentity ; 根据 HTML 数字字符串解码成字符
mb_detect_encoding ; 检测字符的编码
mb_detect_order ; 设置/获取 字符编码的检测顺序
mb_encode_mimeheader ; 为 MIME 头编码字符串
mb_encode_numericentity ; Encode character to HTML numeric string reference
mb_encoding_aliases ; Get aliases of a known encoding type
mb_ereg ; Regular expression match with multibyte support
mb_eregi ; Regular expression match ignoring case with multibyte support
mb_eregi_replace ; Replace regular expression with multibyte support ignoring case
mb_ereg_match ; Regular expression match for multibyte string
mb_ereg_replace ; Replace regular expression with multibyte support
mb_ereg_replace_callback ; Perform a regular expresssion seach and replace with multibyte support using a callback
mb_ereg_search ; Multibyte regular expression match for predefined multibyte string
mb_ereg_search_getpos ; Returns start point for next regular expression match
mb_ereg_search_getregs ; Retrieve the result from the last multibyte regular expression match
mb_ereg_search_init ; Setup string and regular expression for a multibyte regular expression match
mb_ereg_search_pos ; Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string
mb_ereg_search_regs ; Returns the matched part of a multibyte regular expression
mb_ereg_search_setpos ; Set start point of next regular expression match
mb_get_info ; 获取 mbstring 的内部设置
mb_http_input ; 检测 HTTP 输入字符编码
mb_http_output ; 设置/获取 HTTP 输出字符编码
mb_internal_encoding ; 设置/获取内部字符编码
mb_language ; 设置/获取当前的语言
mb_list_encodings ; 返回所有支持编码的数组
mb_output_handler ; 在输出缓冲中转换字符编码的回调函数
mb_parse_str ; 解析 GET/POST/COOKIE 数据并设置全局变量
mb_preferred_mime_name ; 获取 MIME 字符串
mb_regex_encoding ; Set/Get character encoding for multibyte regex
mb_regex_set_options ; Set/Get the default options for mbregex functions
mb_send_mail ; 发送编码过的邮件
mb_split ; 使用正则表达式分割多字节字符串
mb_strcut ; 获取字符的一部分
mb_strimwidth ; 获取按指定宽度截断的字符串
mb_stripos ; 大小写不敏感地查找字符串在另一个字符串中首次出现的位置
mb_stristr ; 大小写不敏感地查找字符串在另一个字符串里的首次出现
mb_strlen ; 获取字符串的长度
mb_strpos ; 查找字符串在另一个字符串中首次出现的位置
mb_strrchr ; 查找指定字符在另一个字符串中最后一次的出现
mb_strrichr ; 大小写不敏感地查找指定字符在另一个字符串中最后一次的出现
mb_strripos ; 大小写不敏感地在字符串中查找一个字符串最后出现的位置
mb_strrpos ; 查找字符串在一个字符串中最后出现的位置
mb_strstr ; 查找字符串在另一个字符串里的首次出现
mb_strtolower ; 使字符串小写
mb_strtoupper ; 使字符串大写
mb_strwidth ; 返回字符串的宽度
mb_substitute_character ; 设置/获取替代字符
mb_substr ; 获取字符串的部分
mb_substr_count ; 统计字符串出现的次数
mcrypt_cbc ; 以 CBC 模式加解密数据
mcrypt_cfb ; 以 CFB 模式加解密数据
mcrypt_create_iv ; 从随机源创建初始向量
mcrypt_decrypt ; 使用给定参数解密密文
mcrypt_ecb ; 已废弃：使用 ECB 模式加解密数据
mcrypt_encrypt ; 使用给定参数加密明文
mcrypt_enc_get_algorithms_name ; 返回打开的算法名称
mcrypt_enc_get_block_size ; 返回打开的算法的分组大小
mcrypt_enc_get_iv_size ; 返回打开的算法的初始向量大小
mcrypt_enc_get_key_size ; 返回打开的模式所能支持的最长密钥
mcrypt_enc_get_modes_name ; 返回打开的模式的名称
mcrypt_enc_get_supported_key_sizes ; 以数组方式返回打开的算法所支持的密钥长度
mcrypt_enc_is_block_algorithm ; 检测打开模式的算法是否为分组算法
mcrypt_enc_is_block_algorithm_mode ; 检测打开的模式是否支持分组加密
mcrypt_enc_is_block_mode ; 检测打开的模式是否以分组方式输出
mcrypt_enc_self_test ; 在打开的模块上进行自检
mcrypt_generic ; 加密数据
mcrypt_generic_deinit ; 对加密模块进行清理工作
mcrypt_generic_end ; 终止加密
mcrypt_generic_init ; 初始化加密所需的缓冲区
mcrypt_get_block_size ; 获得加密算法的分组大小
mcrypt_get_cipher_name ; 获取加密算法名称
mcrypt_get_iv_size ; 返回指定算法/模式组合的初始向量大小
mcrypt_get_key_size ; 获取指定加密算法的密钥大小
mcrypt_list_algorithms ; 获取支持的加密算法
mcrypt_list_modes ; 获取所支持的模式
mcrypt_module_close ; 关闭加密模块
mcrypt_module_get_algo_block_size ; 返回指定算法的分组大小
mcrypt_module_get_algo_key_size ; 获取打开模式所支持的最大密钥大小
mcrypt_module_get_supported_key_sizes ; 以数组形式返回打开的算法所支持的密钥大小
mcrypt_module_is_block_algorithm ; 检测指定算法是否为分组加密算法
mcrypt_module_is_block_algorithm_mode ; 返回指定模块是否是分组加密模式
mcrypt_module_is_block_mode ; 检测指定模式是否以分组方式输出
mcrypt_module_open ; 打开算法和模式对应的模块
mcrypt_module_self_test ; 在指定模块上执行自检
mcrypt_ofb ; 使用 OFB 模式加密/解密数据
md5 ; 计算字符串的 MD5 散列值
md5_file ; 计算指定文件的 MD5 散列值
mdecrypt_generic ; 解密数据
Memcache::add ; 增加一个条目到缓存服务器
Memcache::addServer ; 向连接池中添加一个memcache服务器
Memcache::close ; 关闭memcache连接
Memcache::connect ; 打开一个memcached服务端连接
Memcache::decrement ; 减小元素的值
Memcache::delete ; 从服务端删除一个元素
Memcache::flush ; 清洗（删除）已经存储的所有的元素
Memcache::get ; 从服务端检回一个元素
Memcache::getExtendedStats ; 缓存服务器池中所有服务器统计信息
Memcache::getServerStatus ; 用于获取一个服务器的在线/离线状态
Memcache::getStats ; 获取服务器统计信息
Memcache::getVersion ; 返回服务器版本信息
Memcache::increment ; 增加一个元素的值
Memcache::pconnect ; 打开一个到服务器的持久化连接
Memcache::replace ; 替换已经存在的元素的值
Memcache::set ; Store data at the server
Memcache::setCompressThreshold ; 开启大值自动压缩
Memcache::setServerParams ; 运行时修改服务器参数和状态
Memcached::add ; 向一个新的key下面增加一个元素
Memcached::addByKey ; 在指定服务器上的一个新的key下增加一个元素
Memcached::addServer ; 向服务器池中增加一个服务器
Memcached::addServers ; 向服务器池中增加多台服务器
Memcached::append ; 向已存在元素后追加数据
Memcached::appendByKey ; 向指定服务器上已存在元素后追加数据
Memcached::cas ; 比较并交换值
Memcached::casByKey ; 在指定服务器上比较并交换值
Memcached::decrement ; 减小数值元素的值
Memcached::decrementByKey ; Decrement numeric item's value, stored on a specific server
Memcached::delete ; 删除一个元素
Memcached::deleteByKey ; 从指定的服务器删除一个元素
Memcached::deleteMulti ; Delete multiple items
Memcached::deleteMultiByKey ; Delete multiple items from a specific server
Memcached::fetch ; 抓取下一个结果
Memcached::fetchAll ; 抓取所有剩余的结果
Memcached::flush ; 作废缓存中的所有元素
Memcached::get ; 检索一个元素
Memcached::getAllKeys ; Gets the keys stored on all the servers
Memcached::getByKey ; 从特定的服务器检索元素
Memcached::getDelayed ; 请求多个元素
Memcached::getDelayedByKey ; 从指定的服务器上请求多个元素
Memcached::getMulti ; 检索多个元素
Memcached::getMultiByKey ; 从特定服务器检索多个元素
Memcached::getOption ; 获取Memcached的选项值
Memcached::getResultCode ; 返回最后一次操作的结果代码
Memcached::getResultMessage ; 返回最后一次操作的结果描述消息
Memcached::getServerByKey ; 获取一个key所映射的服务器信息
Memcached::getServerList ; 获取服务器池中的服务器列表
Memcached::getStats ; 获取服务器池的统计信息
Memcached::getVersion ; 获取服务器池中所有服务器的版本信息
Memcached::increment ; 增加数值元素的值
Memcached::incrementByKey ; Increment numeric item's value, stored on a specific server
Memcached::isPersistent ; Check if a persitent connection to memcache is being used
Memcached::isPristine ; Check if the instance was recently created
Memcached::prepend ; 向一个已存在的元素前面追加数据
Memcached::prependByKey ; Prepend data to an existing item on a specific server
Memcached::quit ; 关闭所有打开的链接。
Memcached::replace ; 替换已存在key下的元素
Memcached::replaceByKey ; Replace the item under an existing key on a specific server
Memcached::resetServerList ; Clears all servers from the server list
Memcached::set ; 存储一个元素
Memcached::setByKey ; Store an item on a specific server
Memcached::setMulti ; 存储多个元素
Memcached::setMultiByKey ; Store multiple items on a specific server
Memcached::setOption ; 设置一个memcached选项
Memcached::setOptions ; Set Memcached options
Memcached::setSaslAuthData ; Set the credentials to use for authentication
Memcached::touch ; Set a new expiration on an item
Memcached::touchByKey ; Set a new expiration on an item on a specific server
Memcached::__construct ; 创建一个Memcached实例
memcache_debug ; 转换调试输出的开/关
memory_get_peak_usage ; 返回分配给 PHP 内存的峰值
memory_get_usage ; 返回分配给 PHP 的内存量
metaphone ; Calculate the metaphone key of a string
method_exists ; 检查类的方法是否存在
mhash ; Computes hash
mhash_count ; Gets the highest available hash ID
mhash_get_block_size ; Gets the block size of the specified hash
mhash_get_hash_name ; Gets the name of the specified hash
mhash_keygen_s2k ; Generates a key
microtime ; 返回当前 Unix 时间戳和微秒数
mime_content_type ; 检测文件的 MIME 类型（已废弃）
min ; 找出最小值
mkdir ; 新建目录
mktime ; 取得一个日期的 Unix 时间戳
money_format ; Formats a number as a currency string
move_uploaded_file ; 将上传的文件移动到新位置
msg_get_queue ; Create or attach to a message queue
msg_queue_exists ; Check whether a message queue exists
msg_receive ; Receive a message from a message queue
msg_remove_queue ; Destroy a message queue
msg_send ; Send a message to a message queue
msg_set_queue ; Set information in the message queue data structure
msg_stat_queue ; Returns information from the message queue data structure
mt_getrandmax ; 显示随机数的最大可能值
mt_rand ; 生成更好的随机数
mt_srand ; 播下一个更好的随机数发生器种子
MultipleIterator::attachIterator ; Attaches iterator information
MultipleIterator::containsIterator ; Checks if an iterator is attached
MultipleIterator::countIterators ; Gets the number of attached iterator instances
MultipleIterator::current ; Gets the registered iterator instances
MultipleIterator::detachIterator ; Detaches an iterator
MultipleIterator::getFlags ; Gets the flag information
MultipleIterator::key ; Gets the registered iterator instances
MultipleIterator::next ; Moves all attached iterator instances forward
MultipleIterator::rewind ; Rewinds all attached iterator instances
MultipleIterator::setFlags ; Sets flags
MultipleIterator::valid ; Checks the validity of sub iterators
MultipleIterator::__construct ; Constructs a new MultipleIterator
Mutex::create ; 创建一个互斥量
Mutex::destroy ; 销毁互斥量
Mutex::lock ; 给互斥量加锁
Mutex::trylock ; 尝试给互斥量加锁
Mutex::unlock ; 释放互斥量上的锁
mysqli::$affected_rows ; Gets the number of affected rows in a previous MySQL operation
mysqli::$client_info ; Get MySQL client info
mysqli::$connect_errno ; Returns the error code from last connect call
mysqli::$connect_error ; Returns a string description of the last connect error
mysqli::$error ; Returns a string description of the last error
mysqli::$error_list ; Returns a list of errors from the last command executed
mysqli::$field_count ; Returns the number of columns for the most recent query
mysqli::$host_info ; 返回一个表述使用的连接类型的字符串
mysqli::$info ; Retrieves information about the most recently executed query
mysqli::$insert_id ; Returns the auto generated id used in the last query
mysqli::$protocol_version ; 返回MySQL使用的协议版本号
mysqli::$server_info ; 返回MySQL服务器的版本号
mysqli::$server_version ; 作为一个整数返回MySQL服务器的版本
mysqli::$sqlstate ; Returns the SQLSTATE error from previous MySQL operation
mysqli::$thread_id ; Returns the thread ID for the current connection
mysqli::$warning_count ; Returns the number of warnings from the last query for the given link
mysqli::autocommit ; 打开或关闭本次数据库连接的自动命令提交事务模式
mysqli::begin_transaction ; Starts a transaction
mysqli::change_user ; Changes the user of the specified database connection
mysqli::character_set_name ; 返回当前数据库连接的默认字符编码
mysqli::close ; 关闭先前打开的数据库连接
mysqli::commit ; 提交一个事务
mysqli::debug ; Performs debugging operations
mysqli::disable_reads_from_master ; Disable reads from master
mysqli::dump_debug_info ; 将调试信息输出到日志
mysqli::errno ; 返回最近函数调用的错误代码
mysqli::get_charset ; Returns a character set object
mysqli::get_client_info ; Get MySQL client info
mysqli::get_connection_stats ; Returns statistics about the client connection
mysqli::get_warnings ; Get result of SHOW WARNINGS
mysqli::init ; Initializes MySQLi and returns a resource for use with mysqli_real_connect()
mysqli::kill ; Asks the server to kill a MySQL thread
mysqli::more_results ; Check if there are any more query results from a multi query
mysqli::multi_query ; Performs a query on the database
mysqli::next_result ; Prepare next result from multi_query
mysqli::options ; Set options
mysqli::ping ; Pings a server connection, or tries to reconnect if the connection has gone down
mysqli::poll ; Poll connections
mysqli::prepare ; Prepare an SQL statement for execution
mysqli::query ; 对数据库执行一次查询
mysqli::real_connect ; 建立一个 MySQL 服务器连接
mysqli::real_escape_string ; Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection
mysqli::real_query ; 执行一个mysql查询
mysqli::reap_async_query ; Get result from async query
mysqli::refresh ; Refreshes
mysqli::release_savepoint ; Removes the named savepoint from the set of savepoints of the current transaction
mysqli::rollback ; 回退当前事务
mysqli::rpl_query_type ; Returns RPL query type
mysqli::savepoint ; Set a named transaction savepoint
mysqli::select_db ; 选择用于数据库查询的默认数据库
mysqli::send_query ; 发送请求并返回结果
mysqli::set_charset ; 设置默认字符编码
mysqli::set_local_infile_default ; Unsets user defined handler for load local infile command
mysqli::set_local_infile_handler ; Set callback function for LOAD DATA LOCAL INFILE command
mysqli::ssl_set ; Used for establishing secure connections using SSL
mysqli::stat ; Gets the current system status
mysqli::stmt_init ; 初始化一条语句并返回一个用于mysqli_stmt_prepare(调用)的对象
mysqli::store_result ; Transfers a result set from the last query
mysqli::thread_safe ; 返回是否是线程安全的
mysqli::use_result ; Initiate a result set retrieval
mysqli::__construct ; Open a new connection to the MySQL server
mysqli_bind_param ; mysqli_stmt_bind_param的别名
mysqli_bind_result ; mysqli_stmt_bind_result的别名
mysqli_client_encoding ; mysqli_character_set_name的别名
mysqli_connect ; 别名 mysqli::__construct
mysqli_disable_rpl_parse ; 禁用RPL解析
mysqli_driver::$report_mode ; Enables or disables internal report functions
mysqli_driver::embedded_server_end ; Stop embedded server
mysqli_driver::embedded_server_start ; Initialize and start embedded server
mysqli_enable_reads_from_master ; 开启从主机读取
mysqli_enable_rpl_parse ; 开启RPL解析
mysqli_escape_string ; 别名 mysqli_real_escape_string
mysqli_execute ; mysqli_stmt_execute的别名
mysqli_fetch ; mysqli_stmt_fetch的别名。
mysqli_get_cache_stats ; 返回客户端Zval缓存统计信息
mysqli_get_client_stats ; Returns client per-process statistics
mysqli_get_client_version ; Returns the MySQL client version as an integer
mysqli_get_links_stats ; Return information about open and cached links
mysqli_get_metadata ; mysqli_stmt_result_metadata的别名
mysqli_master_query ; 在主/从机制中强制在主机中执行一个查询
mysqli_param_count ; mysqli_stmt_param_count的别名
mysqli_report ; 开启或禁用（Mysql）内部（错误）报告函数
mysqli_result::$current_field ; Get current field offset of a result pointer
mysqli_result::$field_count ; Get the number of fields in a result
mysqli_result::$lengths ; Returns the lengths of the columns of the current row in the result set
mysqli_result::$num_rows ; Gets the number of rows in a result
mysqli_result::data_seek ; Adjusts the result pointer to an arbitrary row in the result
mysqli_result::fetch_all ; Fetches all result rows as an associative array, a numeric array, or both
mysqli_result::fetch_array ; Fetch a result row as an associative, a numeric array, or both
mysqli_result::fetch_assoc ; Fetch a result row as an associative array
mysqli_result::fetch_field ; Returns the next field in the result set
mysqli_result::fetch_fields ; Returns an array of objects representing the fields in a result set
mysqli_result::fetch_field_direct ; Fetch meta-data for a single field
mysqli_result::fetch_object ; Returns the current row of a result set as an object
mysqli_result::fetch_row ; Get a result row as an enumerated array
mysqli_result::field_seek ; Set result pointer to a specified field offset
mysqli_result::free ; Frees the memory associated with a result
mysqli_rpl_parse_enabled ; 检查是否开启了RPL解析
mysqli_rpl_probe ; RPL探测
mysqli_send_long_data ; mysqli_stmt_send_long_data的别名
mysqli_set_opt ; mysqli_options的别名
mysqli_slave_query ; 在主/从机制中强制在从机上执行一个查询
mysqli_stmt::$errno ; Returns the error code for the most recent statement call
mysqli_stmt::$error ; Returns a string description for last statement error
mysqli_stmt::$error_list ; Returns a list of errors from the last statement executed
mysqli_stmt::$field_count ; Returns the number of field in the given statement
mysqli_stmt::$insert_id ; Get the ID generated from the previous INSERT operation
mysqli_stmt::$num_rows ; Return the number of rows in statements result set
mysqli_stmt::$param_count ; Returns the number of parameter for the given statement
mysqli_stmt::$sqlstate ; Returns SQLSTATE error from previous statement operation
mysqli_stmt::attr_get ; Used to get the current value of a statement attribute
mysqli_stmt::attr_set ; Used to modify the behavior of a prepared statement
mysqli_stmt::bind_param ; Binds variables to a prepared statement as parameters
mysqli_stmt::bind_result ; Binds variables to a prepared statement for result storage
mysqli_stmt::close ; Closes a prepared statement
mysqli_stmt::data_seek ; Seeks to an arbitrary row in statement result set
mysqli_stmt::execute ; Executes a prepared Query
mysqli_stmt::fetch ; Fetch results from a prepared statement into the bound variables
mysqli_stmt::free_result ; Frees stored result memory for the given statement handle
mysqli_stmt::get_result ; Gets a result set from a prepared statement
mysqli_stmt::get_warnings ; Get result of SHOW WARNINGS
mysqli_stmt::more_results ; Check if there are more query results from a multiple query
mysqli_stmt::next_result ; Reads the next result from a multiple query
mysqli_stmt::prepare ; Prepare an SQL statement for execution
mysqli_stmt::reset ; Resets a prepared statement
mysqli_stmt::result_metadata ; Returns result set metadata from a prepared statement
mysqli_stmt::send_long_data ; Send data in blocks
mysqli_stmt::store_result ; Transfers a result set from a prepared statement
mysqli_stmt::__construct ; Constructs a new mysqli_stmt object
mysqli_warning::next ; The next purpose
mysqli_warning::__construct ; The __construct purpose
MysqlndUhConnection::changeUser ; Changes the user of the specified mysqlnd database connection
MysqlndUhConnection::charsetName ; Returns the default character set for the database connection
MysqlndUhConnection::close ; Closes a previously opened database connection
MysqlndUhConnection::connect ; Open a new connection to the MySQL server
MysqlndUhConnection::endPSession ; End a persistent connection
MysqlndUhConnection::getAffectedRows ; Gets the number of affected rows in a previous MySQL operation
MysqlndUhConnection::getErrorNumber ; Returns the error code for the most recent function call
MysqlndUhConnection::getErrorString ; Returns a string description of the last error
MysqlndUhConnection::getFieldCount ; Returns the number of columns for the most recent query
MysqlndUhConnection::getHostInformation ; Returns a string representing the type of connection used
MysqlndUhConnection::getLastInsertId ; Returns the auto generated id used in the last query.
MysqlndUhConnection::getLastMessage ; Retrieves information about the most recently executed query
MysqlndUhConnection::getProtocolInformation ; Returns the version of the MySQL protocol used
MysqlndUhConnection::getServerInformation ; Returns the version of the MySQL server
MysqlndUhConnection::getServerStatistics ; Gets the current system status
MysqlndUhConnection::getServerVersion ; Returns the version of the MySQL server as an integer
MysqlndUhConnection::getSqlstate ; Returns the SQLSTATE error from previous MySQL operation
MysqlndUhConnection::getStatistics ; Returns statistics about the client connection.
MysqlndUhConnection::getThreadId ; Returns the thread ID for the current connection
MysqlndUhConnection::getWarningCount ; Returns the number of warnings from the last query for the given link
MysqlndUhConnection::init ; Initialize mysqlnd connection
MysqlndUhConnection::killConnection ; Asks the server to kill a MySQL thread
MysqlndUhConnection::listFields ; List MySQL table fields
MysqlndUhConnection::listMethod ; Wrapper for assorted list commands
MysqlndUhConnection::moreResults ; Check if there are any more query results from a multi query
MysqlndUhConnection::nextResult ; Prepare next result from multi_query
MysqlndUhConnection::ping ; Pings a server connection, or tries to reconnect if the connection has gone down
MysqlndUhConnection::query ; Performs a query on the database
MysqlndUhConnection::queryReadResultsetHeader ; Read a result set header
MysqlndUhConnection::reapQuery ; Get result from async query
MysqlndUhConnection::refreshServer ; Flush or reset tables and caches
MysqlndUhConnection::restartPSession ; Restart a persistent mysqlnd connection
MysqlndUhConnection::selectDb ; Selects the default database for database queries
MysqlndUhConnection::sendClose ; Sends a close command to MySQL
MysqlndUhConnection::sendQuery ; Sends a query to MySQL
MysqlndUhConnection::serverDumpDebugInformation ; Dump debugging information into the log for the MySQL server
MysqlndUhConnection::setAutocommit ; Turns on or off auto-committing database modifications
MysqlndUhConnection::setCharset ; Sets the default client character set
MysqlndUhConnection::setClientOption ; Sets a client option
MysqlndUhConnection::setServerOption ; Sets a server option
MysqlndUhConnection::shutdownServer ; The shutdownServer purpose
MysqlndUhConnection::simpleCommand ; Sends a basic COM_* command
MysqlndUhConnection::simpleCommandHandleResponse ; Process a response for a basic COM_* command send to the client
MysqlndUhConnection::sslSet ; Used for establishing secure connections using SSL
MysqlndUhConnection::stmtInit ; Initializes a statement and returns a resource for use with mysqli_statement::prepare
MysqlndUhConnection::storeResult ; Transfers a result set from the last query
MysqlndUhConnection::txCommit ; Commits the current transaction
MysqlndUhConnection::txRollback ; Rolls back current transaction
MysqlndUhConnection::useResult ; Initiate a result set retrieval
MysqlndUhConnection::__construct ; The __construct purpose
MysqlndUhPreparedStatement::execute ; Executes a prepared Query
MysqlndUhPreparedStatement::prepare ; Prepare an SQL statement for execution
MysqlndUhPreparedStatement::__construct ; The __construct purpose
mysqlnd_memcache_get_config ; Returns information about the plugin configuration
mysqlnd_memcache_set ; Associate a MySQL connection with a Memcache connection
mysqlnd_ms_dump_servers ; Returns a list of currently configured servers
mysqlnd_ms_fabric_select_global ; Switch to global sharding server for a given table
mysqlnd_ms_fabric_select_shard ; Switch to shard
mysqlnd_ms_get_last_gtid ; 返回最后的全局同步 ID (GTID)
mysqlnd_ms_get_last_used_connection ; Returns an array which describes the last used connection
mysqlnd_ms_get_stats ; Returns query distribution and connection statistics
mysqlnd_ms_match_wild ; Finds whether a table name matches a wildcard pattern or not
mysqlnd_ms_query_is_select ; 查询给定的 SQL 会发送给 master、slave 还是最后使用的 MySQL server 执行。
mysqlnd_ms_set_qos ; Sets the quality of service needed from the cluster
mysqlnd_ms_set_user_pick_server ; Sets a callback for user-defined read/write splitting
mysqlnd_ms_xa_begin ; Starts a distributed/XA transaction among MySQL servers
mysqlnd_ms_xa_commit ; Commits a distributed/XA transaction among MySQL servers
mysqlnd_ms_xa_gc ; Garbage collects unfinished XA transactions after severe errors
mysqlnd_ms_xa_rollback ; Rolls back a distributed/XA transaction among MySQL servers
mysqlnd_qc_clear_cache ; Flush all cache contents
mysqlnd_qc_get_available_handlers ; Returns a list of available storage handler
mysqlnd_qc_get_cache_info ; Returns information on the current handler, the number of cache entries and cache entries, if available
mysqlnd_qc_get_core_stats ; Statistics collected by the core of the query cache
mysqlnd_qc_get_normalized_query_trace_log ; Returns a normalized query trace log for each query inspected by the query cache
mysqlnd_qc_get_query_trace_log ; Returns a backtrace for each query inspected by the query cache
mysqlnd_qc_set_cache_condition ; Set conditions for automatic caching
mysqlnd_qc_set_is_select ; Installs a callback which decides whether a statement is cached
mysqlnd_qc_set_storage_handler ; Change current storage handler
mysqlnd_qc_set_user_handlers ; Sets the callback functions for a user-defined procedural storage handler
mysqlnd_uh_convert_to_mysqlnd ; Converts a MySQL connection handle into a mysqlnd connection handle
mysqlnd_uh_set_connection_proxy ; Installs a proxy for mysqlnd connections
mysqlnd_uh_set_statement_proxy ; Installs a proxy for mysqlnd statements
natcasesort ; 用&ldquo;自然排序&rdquo;算法对数组进行不区分大小写字母的排序
natsort ; 用&ldquo;自然排序&rdquo;算法对数组排序
next ; 将数组中的内部指针向前移动一位
ngettext ; Plural version of gettext
nl2br ; 在字符串所有新行之前插入 HTML 换行标记
nl_langinfo ; Query language and locale information
NoRewindIterator::current ; Get the current value
NoRewindIterator::getInnerIterator ; Get the inner iterator
NoRewindIterator::key ; Get the current key
NoRewindIterator::next ; Forward to the next element
NoRewindIterator::rewind ; Prevents the rewind operation on the inner iterator.
NoRewindIterator::valid ; Validates the iterator
NoRewindIterator::__construct ; Construct a NoRewindIterator
number_format ; 以千位分隔符方式格式化一个数字
OAuth::disableDebug ; 关闭详细的调试
OAuth::disableRedirects ; 关闭重定向
OAuth::disableSSLChecks ; 关闭 SSL 检查
OAuth::enableDebug ; 启用详细调试
OAuth::enableRedirects ; 启用重定向
OAuth::enableSSLChecks ; 启用 SSL 检查
OAuth::fetch ; 获取一个 OAuth 受保护的资源
OAuth::generateSignature ; 生成一个签名
OAuth::getAccessToken ; 获取一个访问令牌
OAuth::getCAPath ; 获取 CA 信息
OAuth::getLastResponse ; 获取最后一次的响应
OAuth::getLastResponseHeaders ; 获取最后一次响应的头信息
OAuth::getLastResponseInfo ; 获取关于最后一次响应的 HTTP 信息
OAuth::getRequestHeader ; 生成 OAuth 头信息字符串签名
OAuth::getRequestToken ; 获取一个请求令牌
OAuth::setAuthType ; 设置授权类型
OAuth::setCAPath ; 设置 CA 路径和信息
OAuth::setNonce ; 为后续请求设置现时标志
OAuth::setRequestEngine ; 设置目标请求引擎
OAuth::setRSACertificate ; 设置 RSA 证书
OAuth::setSSLChecks ; 调整特定的SSL请求检查
OAuth::setTimestamp ; 设置时间戳
OAuth::setToken ; 设置令牌和 secret
OAuth::setVersion ; 设置 OAuth 版本
OAuth::__construct ; 新建一个 OAuth 对象
OAuth::__destruct ; 析构函数
OAuthProvider::addRequiredParameter ; 添加必需的参数
OAuthProvider::callconsumerHandler ; 调用 consumerNonceHandler 回调函数
OAuthProvider::callTimestampNonceHandler ; 调用 timestampNonceHandler 回调函数
OAuthProvider::calltokenHandler ; 调用 tokenNonceHandler 回调函数
OAuthProvider::checkOAuthRequest ; 检查一个 oauth 请求
OAuthProvider::consumerHandler ; 设置 consumerHandler 句柄回调函数
OAuthProvider::generateToken ; 生成一个随机令牌
OAuthProvider::is2LeggedEndpoint ; is2LeggedEndpoint
OAuthProvider::isRequestTokenEndpoint ; 设置 isRequestTokenEndpoint
OAuthProvider::removeRequiredParameter ; 移除一个必需的参数
OAuthProvider::reportProblem ; 报告问题
OAuthProvider::setParam ; 设置一个参数
OAuthProvider::setRequestTokenPath ; 设置请求令牌路径
OAuthProvider::timestampNonceHandler ; 设置 timestampNonceHandler 句柄回调函数
OAuthProvider::tokenHandler ; 设置 tokenHandler 句柄回调函数
OAuthProvider::__construct ; 新建一个  OAuthProvider 对象
oauth_get_sbs ; 生成一个签名字符基串
oauth_urlencode ; 将 URI 编码为 RFC 3986 规范
ob_clean ; 清空（擦掉）输出缓冲区
ob_deflatehandler ; Deflate output handler
ob_end_clean ; 清空（擦除）缓冲区并关闭输出缓冲
ob_end_flush ; 冲刷出（送出）输出缓冲区内容并关闭缓冲
ob_etaghandler ; ETag output handler
ob_flush ; 冲刷出（送出）输出缓冲区中的内容
ob_get_clean ; 得到当前缓冲区的内容并删除当前输出缓。
ob_get_contents ; 返回输出缓冲区的内容
ob_get_flush ; 刷出（送出）缓冲区内容，以字符串形式返回内容，并关闭输出缓冲区。
ob_get_length ; 返回输出缓冲区内容的长度
ob_get_level ; 返回输出缓冲机制的嵌套级别
ob_get_status ; 得到所有输出缓冲区的状态
ob_gzhandler ; 在ob_start中使用的用来压缩输出缓冲区中内容的回调函数。ob_start callback function to gzip output buffer
ob_iconv_handler ; 以输出缓冲处理程序转换字符编码
ob_implicit_flush ; 打开/关闭绝对刷送
ob_inflatehandler ; Inflate output handler
ob_list_handlers ; 列出所有使用中的输出处理程序。
ob_start ; 打开输出控制缓冲
ob_tidyhandler ; ob_start callback function to repair the buffer
octdec ; 八进制转换为十进制
ogg:// ; 音频流
opcache_compile_file ; 无需运行，即可编译并缓存 PHP 脚本
opcache_get_configuration ; 获取缓存的配置信息
opcache_get_status ; 获取缓存的状态信息
opcache_invalidate ; 废除脚本缓存
opcache_is_script_cached ; Tells whether a script is cached in OPCache
opcache_reset ; 重置字节码缓存的内容
opendir ; 打开目录句柄
openlog ; Open connection to system logger
openssl_cipher_iv_length ; Gets the cipher iv length
openssl_csr_export ; Exports a CSR as a string
openssl_csr_export_to_file ; Exports a CSR to a file
openssl_csr_get_public_key ; Returns the public key of a CERT
openssl_csr_get_subject ; Returns the subject of a CERT
openssl_csr_new ; Generates a CSR
openssl_csr_sign ; Sign a CSR with another certificate (or itself) and generate a certificate
openssl_decrypt ; Decrypts data
openssl_dh_compute_key ; Computes shared secret for public value of remote DH key and local DH key
openssl_digest ; Computes a digest
openssl_encrypt ; Encrypts data
openssl_error_string ; Return openSSL error message
openssl_free_key ; Free key resource
openssl_get_cert_locations ; Retrieve the available certificate locations
openssl_get_cipher_methods ; Gets available cipher methods
openssl_get_md_methods ; Gets available digest methods
openssl_get_privatekey ; 别名 openssl_pkey_get_private
openssl_get_publickey ; 别名 openssl_pkey_get_public
openssl_open ; Open sealed data
openssl_pbkdf2 ; Generates a PKCS5 v2 PBKDF2 string, defaults to SHA-1
openssl_pkcs7_decrypt ; Decrypts an S/MIME encrypted message
openssl_pkcs7_encrypt ; Encrypt an S/MIME message
openssl_pkcs7_sign ; Sign an S/MIME message
openssl_pkcs7_verify ; Verifies the signature of an S/MIME signed message
openssl_pkcs12_export ; Exports a PKCS#12 Compatible Certificate Store File to variable.
openssl_pkcs12_export_to_file ; Exports a PKCS#12 Compatible Certificate Store File
openssl_pkcs12_read ; Parse a PKCS#12 Certificate Store into an array
openssl_pkey_export ; Gets an exportable representation of a key into a string
openssl_pkey_export_to_file ; Gets an exportable representation of a key into a file
openssl_pkey_free ; Frees a private key
openssl_pkey_get_details ; Returns an array with the key details
openssl_pkey_get_private ; Get a private key
openssl_pkey_get_public ; Extract public key from certificate and prepare it for use
openssl_pkey_new ; Generates a new private key
openssl_private_decrypt ; Decrypts data with private key
openssl_private_encrypt ; Encrypts data with private key
openssl_public_decrypt ; Decrypts data with public key
openssl_public_encrypt ; Encrypts data with public key
openssl_random_pseudo_bytes ; Generate a pseudo-random string of bytes
openssl_seal ; Seal (encrypt) data
openssl_sign ; Generate signature
openssl_spki_export ; Exports a valid PEM formatted public key signed public key and challenge
openssl_spki_export_challenge ; Exports the challenge assoicated with a signed public key and challenge
openssl_spki_new ; Generate a new signed public key and challenge
openssl_spki_verify ; Verifies a signed public key and challenge
openssl_verify ; Verify signature
openssl_x509_checkpurpose ; Verifies if a certificate can be used for a particular purpose
openssl_x509_check_private_key ; Checks if a private key corresponds to a certificate
openssl_x509_export ; Exports a certificate as a string
openssl_x509_export_to_file ; Exports a certificate to file
openssl_x509_fingerprint ; Calculates the fingerprint, or digest, of a given X.509 certificate
openssl_x509_free ; Free certificate resource
openssl_x509_parse ; Parse an X509 certificate and return the information as an array
ord ; 返回字符的 ASCII 码值
OuterIterator::getInnerIterator ; Returns the inner iterator for the current entry.
output_add_rewrite_var ; 添加URL重写器的值（Add URL rewriter values）
output_reset_rewrite_vars ; 重设URL重写器的值（Reset URL rewriter values）
pack ; Pack data into binary string
ParentIterator::accept ; Determines acceptability
ParentIterator::getChildren ; Return the inner iterator's children contained in a ParentIterator
ParentIterator::hasChildren ; Check whether the inner iterator's current element has children
ParentIterator::next ; Move the iterator forward
ParentIterator::rewind ; Rewind the iterator
ParentIterator::__construct ; Constructs a ParentIterator
parsekit_compile_file ; Compile a PHP file and return the resulting op array
parsekit_compile_string ; Compile a string of PHP code and return the resulting op array
parsekit_func_arginfo ; Return information regarding function argument(s)
parse_ini_file ; 解析一个配置文件
parse_ini_string ; Parse a configuration string
parse_str ; 将字符串解析成多个变量
parse_url ; 解析 URL，返回其组成部分
passthru ; 执行外部程序并且显示原始输出
password_get_info ; Returns information about the given hash
password_hash ; Creates a password hash
password_needs_rehash ; Checks if the given hash matches the given options
password_verify ; Verifies that a password matches a hash
pathinfo ; 返回文件路径的信息
pclose ; 关闭进程文件指针
pcntl_alarm ; 为进程设置一个alarm闹钟信号
pcntl_errno ; 别名 pcntl_strerror
pcntl_exec ; 在当前进程空间执行指定程序
pcntl_getpriority ; 获取任意进程的优先级
pcntl_get_last_error ; Retrieve the error number set by the last pcntl function which failed
pcntl_setpriority ; 修改任意进程的优先级
pcntl_signal ; 安装一个信号处理器
pcntl_signal_dispatch ; 调用等待信号的处理器
pcntl_sigprocmask ; 设置或检索阻塞信号
pcntl_sigtimedwait ; 带超时机制的信号等待
pcntl_sigwaitinfo ; 等待信号
pcntl_strerror ; Retrieve the system error message associated with the given errno
pcntl_wait ; 等待或返回fork的子进程状态
pcntl_waitpid ; 等待或返回fork的子进程状态
pcntl_wexitstatus ; 返回一个中断的子进程的返回代码
pcntl_wifexited ; 检查状态代码是否代表一个正常的退出。
pcntl_wifsignaled ; 检查子进程状态码是否代表由于某个信号而中断
pcntl_wifstopped ; 检查子进程当前是否已经停止
pcntl_wstopsig ; 返回导致子进程停止的信号
pcntl_wtermsig ; 返回导致子进程中断的信号
PDO::beginTransaction ; 启动一个事务
PDO::commit ; 提交一个事务
PDO::errorCode ; 获取跟数据库句柄上一次操作相关的 SQLSTATE
PDO::errorInfo ; Fetch extended error information associated with the last operation on the database handle
PDO::exec ; 执行一条 SQL 语句，并返回受影响的行数
PDO::getAttribute ; 取回一个数据库连接的属性
PDO::getAvailableDrivers ; 返回一个可用驱动的数组
PDO::inTransaction ; 检查是否在一个事务内
PDO::lastInsertId ; 返回最后插入行的ID或序列值
PDO::prepare ; Prepares a statement for execution and returns a statement object
PDO::query ; Executes an SQL statement, returning a result set as a PDOStatement object
PDO::quote ; Quotes a string for use in a query.
PDO::rollBack ; 回滚一个事务
PDO::setAttribute ; 设置属性
PDO::sqliteCreateAggregate ; Registers an aggregating User Defined Function for use in SQL statements
PDO::sqliteCreateCollation ; Registers a User Defined Function for use as a collating function in SQL statements
PDO::sqliteCreateFunction ; Registers a User Defined Function for use in SQL statements
PDO::__construct ; 创建一个表示数据库连接的 PDO 实例
PDOStatement::bindColumn ; 绑定一列到一个 PHP 变量
PDOStatement::bindParam ; 绑定一个参数到指定的变量名
PDOStatement::bindValue ; 把一个值绑定到一个参数
PDOStatement::closeCursor ; 关闭游标，使语句能再次被执行。
PDOStatement::columnCount ; 返回结果集中的列数
PDOStatement::debugDumpParams ; 打印一条 SQL 预处理命令
PDOStatement::errorCode ; 获取跟上一次语句句柄操作相关的 SQLSTATE
PDOStatement::errorInfo ; 获取跟上一次语句句柄操作相关的扩展错误信息
PDOStatement::execute ; 执行一条预处理语句
PDOStatement::fetch ; 从结果集中获取下一行
PDOStatement::fetchAll ; 返回一个包含结果集中所有行的数组
PDOStatement::fetchColumn ; 从结果集中的下一行返回单独的一列。
PDOStatement::fetchObject ; 获取下一行并作为一个对象返回。
PDOStatement::getAttribute ; 检索一个语句属性
PDOStatement::getColumnMeta ; 返回结果集中一列的元数据
PDOStatement::nextRowset ; 在一个多行集语句句柄中推进到下一个行集
PDOStatement::rowCount ; 返回受上一个 SQL 语句影响的行数
PDOStatement::setAttribute ; 设置一个语句属性
PDOStatement::setFetchMode ; 为语句设置默认的获取模式。
PDO_MYSQL DSN ; Connecting to MySQL databases
PDO_SQLITE DSN ; Connecting to SQLite databases
pfsockopen ; 打开一个持久的网络连接或者Unix套接字连接。
phar:// ; PHP 归档
Phar::addEmptyDir ; Add an empty directory to the phar archive
Phar::addFile ; Add a file from the filesystem to the phar archive
Phar::addFromString ; Add a file from a string to the phar archive
Phar::apiVersion ; Returns the api version
Phar::buildFromDirectory ; Construct a phar archive from the files within a directory.
Phar::buildFromIterator ; Construct a phar archive from an iterator.
Phar::canCompress ; Returns whether phar extension supports compression using either zlib or bzip2
Phar::canWrite ; Returns whether phar extension supports writing and creating phars
Phar::compress ; Compresses the entire Phar archive using Gzip or Bzip2 compression
Phar::compressAllFilesBZIP2 ; Compresses all files in the current Phar archive using Bzip2 compression
Phar::compressAllFilesGZ ; Compresses all files in the current Phar archive using Gzip compression
Phar::compressFiles ; Compresses all files in the current Phar archive
Phar::convertToData ; Convert a phar archive to a non-executable tar or zip file
Phar::convertToExecutable ; Convert a phar archive to another executable phar archive file format
Phar::copy ; Copy a file internal to the phar archive to another new file within the phar
Phar::count ; Returns the number of entries (files) in the Phar archive
Phar::createDefaultStub ; Create a phar-file format specific stub
Phar::decompress ; Decompresses the entire Phar archive
Phar::decompressFiles ; Decompresses all files in the current Phar archive
Phar::delete ; Delete a file within a phar archive
Phar::delMetadata ; Deletes the global metadata of the phar
Phar::extractTo ; Extract the contents of a phar archive to a directory
Phar::getMetadata ; Returns phar archive meta-data
Phar::getModified ; Return whether phar was modified
Phar::getSignature ; Return MD5/SHA1/SHA256/SHA512/OpenSSL signature of a Phar archive
Phar::getStub ; Return the PHP loader or bootstrap stub of a Phar archive
Phar::getSupportedCompression ; Return array of supported compression algorithms
Phar::getSupportedSignatures ; Return array of supported signature types
Phar::getVersion ; Return version info of Phar archive
Phar::hasMetadata ; Returns whether phar has global meta-data
Phar::interceptFileFuncs ; instructs phar to intercept fopen, file_get_contents, opendir, and all of the stat-related functions
Phar::isBuffering ; Used to determine whether Phar write operations are being buffered, or are flushing directly to disk
Phar::isCompressed ; Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)
Phar::isFileFormat ; Returns true if the phar archive is based on the tar/phar/zip file format depending on the parameter
Phar::isValidPharFilename ; Returns whether the given filename is a valid phar filename
Phar::isWritable ; Returns true if the phar archive can be modified
Phar::loadPhar ; Loads any phar archive with an alias
Phar::mapPhar ; Reads the currently executed file (a phar) and registers its manifest
Phar::mount ; Mount an external path or file to a virtual location within the phar archive
Phar::mungServer ; Defines a list of up to 4 $_SERVER variables that should be modified for execution
Phar::offsetExists ; determines whether a file exists in the phar
Phar::offsetGet ; Gets a PharFileInfo object for a specific file
Phar::offsetSet ; set the contents of an internal file to those of an external file
Phar::offsetUnset ; remove a file from a phar
Phar::running ; Returns the full path on disk or full phar URL to the currently executing Phar archive
Phar::setAlias ; Set the alias for the Phar archive
Phar::setDefaultStub ; Used to set the PHP loader or bootstrap stub of a Phar archive to the default loader
Phar::setMetadata ; Sets phar archive meta-data
Phar::setSignatureAlgorithm ; set the signature algorithm for a phar and apply it.
Phar::setStub ; Used to set the PHP loader or bootstrap stub of a Phar archive
Phar::startBuffering ; Start buffering Phar write operations, do not modify the Phar object on disk
Phar::stopBuffering ; Stop buffering write requests to the Phar archive, and save changes to disk
Phar::uncompressAllFiles ; Uncompresses all files in the current Phar archive
Phar::unlinkArchive ; Completely remove a phar archive from disk and from memory
Phar::webPhar ; mapPhar for web-based phars. front controller for web applications
Phar::__construct ; Construct a Phar archive object
PharData::addEmptyDir ; Add an empty directory to the tar/zip archive
PharData::addFile ; Add a file from the filesystem to the tar/zip archive
PharData::addFromString ; Add a file from the filesystem to the tar/zip archive
PharData::buildFromDirectory ; Construct a tar/zip archive from the files within a directory.
PharData::buildFromIterator ; Construct a tar or zip archive from an iterator.
PharData::compress ; Compresses the entire tar/zip archive using Gzip or Bzip2 compression
PharData::compressFiles ; Compresses all files in the current tar/zip archive
PharData::convertToData ; Convert a phar archive to a non-executable tar or zip file
PharData::convertToExecutable ; Convert a non-executable tar/zip archive to an executable phar archive
PharData::copy ; Copy a file internal to the phar archive to another new file within the phar
PharData::decompress ; Decompresses the entire Phar archive
PharData::decompressFiles ; Decompresses all files in the current zip archive
PharData::delete ; Delete a file within a tar/zip archive
PharData::delMetadata ; Deletes the global metadata of a zip archive
PharData::extractTo ; Extract the contents of a tar/zip archive to a directory
PharData::isWritable ; Returns true if the tar/zip archive can be modified
PharData::offsetSet ; set the contents of a file within the tar/zip to those of an external file or string
PharData::offsetUnset ; remove a file from a tar/zip archive
PharData::setAlias ; dummy function (Phar::setAlias is not valid for PharData)
PharData::setDefaultStub ; dummy function (Phar::setDefaultStub is not valid for PharData)
PharData::setStub ; dummy function (Phar::setStub is not valid for PharData)
PharData::__construct ; Construct a non-executable tar or zip archive object
PharFileInfo::chmod ; Sets file-specific permission bits
PharFileInfo::compress ; Compresses the current Phar entry with either zlib or bzip2 compression
PharFileInfo::decompress ; Decompresses the current Phar entry within the phar
PharFileInfo::delMetadata ; Deletes the metadata of the entry
PharFileInfo::getCompressedSize ; Returns the actual size of the file (with compression) inside the Phar archive
PharFileInfo::getCRC32 ; Returns CRC32 code or throws an exception if CRC has not been verified
PharFileInfo::getMetadata ; Returns file-specific meta-data saved with a file
PharFileInfo::getPharFlags ; Returns the Phar file entry flags
PharFileInfo::hasMetadata ; Returns the metadata of the entry
PharFileInfo::isCompressed ; Returns whether the entry is compressed
PharFileInfo::isCompressedBZIP2 ; Returns whether the entry is compressed using bzip2
PharFileInfo::isCompressedGZ ; Returns whether the entry is compressed using gz
PharFileInfo::isCRCChecked ; Returns whether file entry has had its CRC verified
PharFileInfo::setCompressedBZIP2 ; Compresses the current Phar entry within the phar using Bzip2 compression
PharFileInfo::setCompressedGZ ; Compresses the current Phar entry within the phar using gz compression
PharFileInfo::setMetadata ; Sets file-specific meta-data saved with a file
PharFileInfo::setUncompressed ; Uncompresses the current Phar entry within the phar, if it is compressed
PharFileInfo::__construct ; Construct a Phar entry object
Phar 上下文（context）选项 ; Phar 上下文（context）选项列表
php:// ; 访问各个输入/输出流（I/O streams）
phpcredits ; 打印 PHP 贡献者名单
phpinfo ; 输出关于 PHP 配置的信息
phpversion ; 获取当前的PHP版本
php_check_syntax ; 检查PHP的语法（并执行）指定的文件
php_ini_loaded_file ; 取得已加载的 php.ini 文件的路径
php_ini_scanned_files ; 返回从额外 ini 目录里解析的 .ini 文件列表
php_logo_guid ; 获取 logo 的 guid
php_sapi_name ; 返回 web 服务器和 PHP 之间的接口类型
php_strip_whitespace ; 返回删除注释和空格后的PHP源码
php_uname ; 返回运行 PHP 的系统的有关信息
php_user_filter::filter ; Called when applying the filter
php_user_filter::onClose ; Called when closing the filter
php_user_filter::onCreate ; Called when creating the filter
pi ; 得到圆周率值
Pool::collect ; 回收已完成任务的引用
Pool::resize ; 改变 Pool 对象的可容纳 Worker 对象的数量
Pool::shutdown ; 停止所有的 Worker 对象
Pool::submit ; 提交对象以执行
Pool::submitTo ; 提交对象以执行
Pool::__construct ; 创建新的 Worker 对象池
popen ; 打开进程文件指针
pos ; current 的别名
posix_access ; Determine accessibility of a file
posix_ctermid ; Get path name of controlling terminal
posix_errno ; 别名 posix_get_last_error
posix_getcwd ; Pathname of current directory
posix_getegid ; Return the effective group ID of the current process
posix_geteuid ; Return the effective user ID of the current process
posix_getgid ; Return the real group ID of the current process
posix_getgrgid ; Return info about a group by group id
posix_getgrnam ; Return info about a group by name
posix_getgroups ; Return the group set of the current process
posix_getlogin ; Return login name
posix_getpgid ; Get process group id for job control
posix_getpgrp ; Return the current process group identifier
posix_getpid ; 返回当前进程 id
posix_getppid ; Return the parent process identifier
posix_getpwnam ; Return info about a user by username
posix_getpwuid ; Return info about a user by user id
posix_getrlimit ; Return info about system resource limits
posix_getsid ; Get the current sid of the process
posix_getuid ; Return the real user ID of the current process
posix_get_last_error ; Retrieve the error number set by the last posix function that failed
posix_initgroups ; Calculate the group access list
posix_isatty ; Determine if a file descriptor is an interactive terminal
posix_kill ; Send a signal to a process
posix_mkfifo ; Create a fifo special file (a named pipe)
posix_mknod ; Create a special or ordinary file (POSIX.1)
posix_setegid ; Set the effective GID of the current process
posix_seteuid ; Set the effective UID of the current process
posix_setgid ; Set the GID of the current process
posix_setpgid ; Set process group id for job control
posix_setsid ; Make the current process a session leader
posix_setuid ; Set the UID of the current process
posix_strerror ; Retrieve the system error message associated with the given errno
posix_times ; Get process times
posix_ttyname ; Determine terminal device name
posix_uname ; Get system name
pow ; 指数表达式
preg_filter ; 执行一个正则表达式搜索和替换
preg_grep ; 返回匹配模式的数组条目
preg_last_error ; 返回最后一个PCRE正则执行产生的错误代码
preg_match ; 执行一个正则表达式匹配
preg_match_all ; 执行一个全局正则表达式匹配
preg_quote ; 转义正则表达式字符
preg_replace ; 执行一个正则表达式的搜索和替换
preg_replace_callback ; 执行一个正则表达式搜索并且使用一个回调进行替换
preg_replace_callback_array ; Perform a regular expression search and replace using callbacks
preg_split ; 通过一个正则表达式分隔字符串
prev ; 将数组的内部指针倒回一位
print ; 输出字符串
printf ; 输出格式化字符串
print_r ; 打印关于变量的易于理解的信息。
proc_close ; 关闭由 proc_open 打开的进程并且返回进程退出码
proc_get_status ; 获取由 proc_open 函数打开的进程的信息
proc_nice ; 修改当前进程的优先级
proc_open ; 执行一个命令，并且打开用来输入/输出的文件指针。
proc_terminate ; 杀除由 proc_open 打开的进程
property_exists ; 检查对象或类是否具有该属性
putenv ; 设置环境变量的值
QuickHashIntHash::add ; This method adds a new entry to the hash
QuickHashIntHash::delete ; This method deletes am entry from the hash
QuickHashIntHash::exists ; This method checks whether a key is part of the hash
QuickHashIntHash::get ; This method retrieves a value from the hash by its key
QuickHashIntHash::getSize ; Returns the number of elements in the hash
QuickHashIntHash::loadFromFile ; This factory method creates a hash from a file
QuickHashIntHash::loadFromString ; This factory method creates a hash from a string
QuickHashIntHash::saveToFile ; This method stores an in-memory hash to disk
QuickHashIntHash::saveToString ; This method returns a serialized version of the hash
QuickHashIntHash::update ; This method updates an entry in the hash with a new value
QuickHashIntHash::__construct ; Creates a new QuickHashIntHash object
QuickHashIntSet::add ; This method adds a new entry to the set
QuickHashIntSet::delete ; This method deletes an entry from the set
QuickHashIntSet::exists ; This method checks whether a key is part of the set
QuickHashIntSet::getSize ; Returns the number of elements in the set
QuickHashIntSet::loadFromFile ; This factory method creates a set from a file
QuickHashIntSet::loadFromString ; This factory method creates a set from a string
QuickHashIntSet::saveToFile ; This method stores an in-memory set to disk
QuickHashIntSet::saveToString ; This method returns a serialized version of the set
QuickHashIntSet::__construct ; Creates a new QuickHashIntSet object
QuickHashIntStringHash::add ; This method adds a new entry to the hash
QuickHashIntStringHash::delete ; This method deletes am entry from the hash
QuickHashIntStringHash::exists ; This method checks whether a key is part of the hash
QuickHashIntStringHash::get ; This method retrieves a value from the hash by its key
QuickHashIntStringHash::getSize ; Returns the number of elements in the hash
QuickHashIntStringHash::loadFromFile ; This factory method creates a hash from a file
QuickHashIntStringHash::loadFromString ; This factory method creates a hash from a string
QuickHashIntStringHash::saveToFile ; This method stores an in-memory hash to disk
QuickHashIntStringHash::saveToString ; This method returns a serialized version of the hash
QuickHashIntStringHash::update ; This method updates an entry in the hash with a new value
QuickHashIntStringHash::__construct ; Creates a new QuickHashIntStringHash object
QuickHashStringIntHash::add ; This method adds a new entry to the hash
QuickHashStringIntHash::delete ; This method deletes am entry from the hash
QuickHashStringIntHash::exists ; This method checks whether a key is part of the hash
QuickHashStringIntHash::get ; This method retrieves a value from the hash by its key
QuickHashStringIntHash::getSize ; Returns the number of elements in the hash
QuickHashStringIntHash::loadFromFile ; This factory method creates a hash from a file
QuickHashStringIntHash::loadFromString ; This factory method creates a hash from a string
QuickHashStringIntHash::saveToFile ; This method stores an in-memory hash to disk
QuickHashStringIntHash::saveToString ; This method returns a serialized version of the hash
QuickHashStringIntHash::update ; This method updates an entry in the hash with a new value
QuickHashStringIntHash::__construct ; Creates a new QuickHashStringIntHash object
quoted_printable_decode ; 将 quoted-printable 字符串转换为 8-bit 字符串
quoted_printable_encode ; 将 8-bit 字符串转换成 quoted-printable 字符串
quotemeta ; 转义元字符集
rad2deg ; 将弧度数转换为相应的角度数
rand ; 产生一个随机整数
random_bytes ; Generates cryptographically secure pseudo-random bytes
random_int ; Generates cryptographically secure pseudo-random integers
range ; 建立一个包含指定范围单元的数组
rar:// ; RAR
RarArchive::close ; Close RAR archive and free all resources
RarArchive::getComment ; Get comment text from the RAR archive
RarArchive::getEntries ; Get full list of entries from the RAR archive
RarArchive::getEntry ; Get entry object from the RAR archive
RarArchive::isBroken ; Test whether an archive is broken (incomplete)
RarArchive::isSolid ; Check whether the RAR archive is solid
RarArchive::open ; Open RAR archive
RarArchive::setAllowBroken ; Whether opening broken archives is allowed
RarArchive::__toString ; Get text representation
RarEntry::extract ; Extract entry from the archive
RarEntry::getAttr ; Get attributes of the entry
RarEntry::getCrc ; Get CRC of the entry
RarEntry::getFileTime ; Get entry last modification time
RarEntry::getHostOs ; Get entry host OS
RarEntry::getMethod ; Get pack method of the entry
RarEntry::getName ; Get name of the entry
RarEntry::getPackedSize ; Get packed size of the entry
RarEntry::getStream ; Get file handler for entry
RarEntry::getUnpackedSize ; Get unpacked size of the entry
RarEntry::getVersion ; Get minimum version of RAR program required to unpack the entry
RarEntry::isDirectory ; Test whether an entry represents a directory
RarEntry::isEncrypted ; Test whether an entry is encrypted
RarEntry::__toString ; Get text representation of entry
RarException::isUsingExceptions ; Check whether error handling with exceptions is in use
RarException::setUsingExceptions ; Activate and deactivate error handling with exceptions
rar_wrapper_cache_stats ; Cache hits and misses for the URL wrapper
rawurldecode ; 对已编码的 URL 字符串进行解码
rawurlencode ; 按照 RFC 3986 对 URL 进行编码
readdir ; 从目录句柄中读取条目
readfile ; 输出一个文件
readgzfile ; Output a gz-file
readline ; 读取一行
readline_add_history ; 添加一行命令行历史记录
readline_callback_handler_install ; 初始化一个 readline 回调接口，然后终端输出提示信息并立即返回
readline_callback_handler_remove ; 移除上一个安装的回调函数句柄并且恢复终端设置
readline_callback_read_char ; 当一个行被接收时读取一个字符并且通知 readline 调用回调函数
readline_clear_history ; 清除历史
readline_completion_function ; 注册一个完成函数
readline_info ; 获取/设置readline内部的各个变量
readline_list_history ; 获取命令历史列表
readline_on_new_line ; 通知readline将光标移动到新行
readline_read_history ; 读取命令历史
readline_redisplay ; 重绘显示区
readline_write_history ; 写入历史记录
readlink ; 返回符号连接指向的目标
read_exif_data ; 别名 exif_read_data
realpath ; 返回规范化的绝对路径名
realpath_cache_get ; Get realpath cache entries
realpath_cache_size ; Get realpath cache size
recode ; 别名 recode_string
recode_file ; Recode from file to file according to recode request
recode_string ; Recode a string according to a recode request
RecursiveArrayIterator::getChildren ; Returns an iterator for the current entry if it is an array or an object.
RecursiveArrayIterator::hasChildren ; Returns whether current entry is an array or an object.
RecursiveCachingIterator::getChildren ; Return the inner iterator's children as a RecursiveCachingIterator
RecursiveCachingIterator::hasChildren ; Check whether the current element of the inner iterator has children
RecursiveCachingIterator::__construct ; Construct
RecursiveCallbackFilterIterator::getChildren ; Return the inner iterator's children contained in a RecursiveCallbackFilterIterator
RecursiveCallbackFilterIterator::hasChildren ; Check whether the inner iterator's current element has children
RecursiveCallbackFilterIterator::__construct ; Create a RecursiveCallbackFilterIterator from a RecursiveIterator
RecursiveDirectoryIterator::getChildren ; Returns an iterator for the current entry if it is a directory
RecursiveDirectoryIterator::getSubPath ; Get sub path
RecursiveDirectoryIterator::getSubPathname ; Get sub path and name
RecursiveDirectoryIterator::hasChildren ; Returns whether current entry is a directory and not '.' or '..'
RecursiveDirectoryIterator::key ; Return path and filename of current dir entry
RecursiveDirectoryIterator::next ; Move to next entry
RecursiveDirectoryIterator::rewind ; Rewind dir back to the start
RecursiveDirectoryIterator::__construct ; Constructs a RecursiveDirectoryIterator
RecursiveFilterIterator::getChildren ; Return the inner iterator's children contained in a RecursiveFilterIterator
RecursiveFilterIterator::hasChildren ; Check whether the inner iterator's current element has children
RecursiveFilterIterator::__construct ; Create a RecursiveFilterIterator from a RecursiveIterator
RecursiveIterator::getChildren ; Returns an iterator for the current entry.
RecursiveIterator::hasChildren ; Returns if an iterator can be created fot the current entry.
RecursiveIteratorIterator::beginChildren ; Begin children
RecursiveIteratorIterator::beginIteration ; Begin Iteration
RecursiveIteratorIterator::callGetChildren ; Get children
RecursiveIteratorIterator::callHasChildren ; Has children
RecursiveIteratorIterator::current ; Access the current element value
RecursiveIteratorIterator::endChildren ; End children
RecursiveIteratorIterator::endIteration ; End Iteration
RecursiveIteratorIterator::getDepth ; Get the current depth of the recursive iteration
RecursiveIteratorIterator::getInnerIterator ; Get inner iterator
RecursiveIteratorIterator::getMaxDepth ; Get max depth
RecursiveIteratorIterator::getSubIterator ; The current active sub iterator
RecursiveIteratorIterator::key ; Access the current key
RecursiveIteratorIterator::next ; Move forward to the next element
RecursiveIteratorIterator::nextElement ; Next element
RecursiveIteratorIterator::rewind ; Rewind the iterator to the first element of the top level inner iterator
RecursiveIteratorIterator::setMaxDepth ; Set max depth
RecursiveIteratorIterator::valid ; Check whether the current position is valid
RecursiveIteratorIterator::__construct ; Construct a RecursiveIteratorIterator
RecursiveRegexIterator::getChildren ; Returns an iterator for the current entry.
RecursiveRegexIterator::hasChildren ; Returns whether an iterator can be obtained for the current entry.
RecursiveRegexIterator::__construct ; Creates a new RecursiveRegexIterator.
RecursiveTreeIterator::beginChildren ; Begin children
RecursiveTreeIterator::beginIteration ; Begin iteration
RecursiveTreeIterator::callGetChildren ; Get children
RecursiveTreeIterator::callHasChildren ; Has children
RecursiveTreeIterator::current ; Get current element
RecursiveTreeIterator::endChildren ; End children
RecursiveTreeIterator::endIteration ; End iteration
RecursiveTreeIterator::getEntry ; Get current entry
RecursiveTreeIterator::getPostfix ; Get the postfix
RecursiveTreeIterator::getPrefix ; Get the prefix
RecursiveTreeIterator::key ; Get the key of the current element
RecursiveTreeIterator::next ; Move to next element
RecursiveTreeIterator::nextElement ; Next element
RecursiveTreeIterator::rewind ; Rewind iterator
RecursiveTreeIterator::setPrefixPart ; Set a part of the prefix
RecursiveTreeIterator::valid ; Check validity
RecursiveTreeIterator::__construct ; Construct a RecursiveTreeIterator
Reflection::export ; Exports
Reflection::getModifierNames ; 获取修饰符的名称
ReflectionClass::export ; 导出一个类
ReflectionClass::getConstant ; 获取定义过的一个常量
ReflectionClass::getConstants ; 获取一组常量
ReflectionClass::getConstructor ; 获取类的构造函数
ReflectionClass::getDefaultProperties ; 获取默认属性
ReflectionClass::getDocComment ; 获取文档注释
ReflectionClass::getEndLine ; 获取最后一行的行数
ReflectionClass::getExtension ; 根据已定义的类获取所在扩展的 ReflectionExtension 对象
ReflectionClass::getExtensionName ; 获取定义的类所在的扩展的名称
ReflectionClass::getFileName ; 获取定义类的文件名
ReflectionClass::getInterfaceNames ; 获取接口（interface）名称
ReflectionClass::getInterfaces ; 获取接口
ReflectionClass::getMethod ; 获取一个类方法的 ReflectionMethod。
ReflectionClass::getMethods ; 获取方法的数组
ReflectionClass::getModifiers ; 获取修饰符
ReflectionClass::getName ; 获取类名
ReflectionClass::getNamespaceName ; 获取命名空间的名称
ReflectionClass::getParentClass ; 获取父类
ReflectionClass::getProperties ; 获取一组属性
ReflectionClass::getProperty ; 获取类的一个属性的 ReflectionProperty
ReflectionClass::getShortName ; 获取短名
ReflectionClass::getStartLine ; 获取起始行号
ReflectionClass::getStaticProperties ; 获取静态（static）属性
ReflectionClass::getStaticPropertyValue ; 获取静态（static）属性的值
ReflectionClass::getTraitAliases ; 返回 trait 别名的一个数组
ReflectionClass::getTraitNames ; 返回这个类所使用 traits 的名称的数组
ReflectionClass::getTraits ; 返回这个类所使用的 traits 数组
ReflectionClass::hasConstant ; 检查常量是否已经定义
ReflectionClass::hasMethod ; 检查方法是否已定义
ReflectionClass::hasProperty ; 检查属性是否已定义
ReflectionClass::implementsInterface ; 接口的实现
ReflectionClass::inNamespace ; 检查是否位于命名空间中
ReflectionClass::isAbstract ; 检查类是否是抽象类（abstract）
ReflectionClass::isCloneable ; 返回了一个类是否可复制
ReflectionClass::isFinal ; 检查类是否声明为 final
ReflectionClass::isInstance ; 检查类的实例
ReflectionClass::isInstantiable ; 检查类是否可实例化
ReflectionClass::isInterface ; 检查类是否是一个接口（interface）
ReflectionClass::isInternal ; 检查类是否由扩展或核心在内部定义
ReflectionClass::isIterateable ; 检查是否可迭代（iterateable）
ReflectionClass::isSubclassOf ; 检查是否为一个子类
ReflectionClass::isTrait ; 返回了是否为一个 trait
ReflectionClass::isUserDefined ; 检查是否由用户定义的
ReflectionClass::newInstance ; 从指定的参数创建一个新的类实例
ReflectionClass::newInstanceArgs ; 从给出的参数创建一个新的类实例。
ReflectionClass::newInstanceWithoutConstructor ; 创建一个新的类实例而不调用它的构造函数
ReflectionClass::setStaticPropertyValue ; 设置静态属性的值
ReflectionClass::__construct ; 构造一个 ReflectionClass 类
ReflectionClass::__toString ; 返回 ReflectionClass 对象字符串的表示形式。
ReflectionExtension::export ; Export
ReflectionExtension::getClasses ; Gets classes
ReflectionExtension::getClassNames ; Gets class names
ReflectionExtension::getConstants ; Gets constants
ReflectionExtension::getDependencies ; Gets dependencies
ReflectionExtension::getFunctions ; Gets extension functions
ReflectionExtension::getINIEntries ; Gets extension ini entries
ReflectionExtension::getName ; Gets extension name
ReflectionExtension::getVersion ; Gets extension version
ReflectionExtension::info ; Print extension info
ReflectionExtension::isPersistent ; Returns whether this extension is persistent
ReflectionExtension::isTemporary ; Returns whether this extension is temporary
ReflectionExtension::__clone ; Clones
ReflectionExtension::__construct ; Constructs a ReflectionExtension
ReflectionExtension::__toString ; To string
ReflectionFunction::export ; Exports function
ReflectionFunction::getClosure ; Returns a dynamically created closure for the function
ReflectionFunction::invoke ; Invokes function
ReflectionFunction::invokeArgs ; Invokes function args
ReflectionFunction::isDisabled ; Checks if function is disabled
ReflectionFunction::__construct ; Constructs a ReflectionFunction object
ReflectionFunction::__toString ; To string
ReflectionFunctionAbstract::getClosureScopeClass ; Returns the scope associated to the closure
ReflectionFunctionAbstract::getClosureThis ; 返回本身的匿名函数
ReflectionFunctionAbstract::getDocComment ; 获取注释内容
ReflectionFunctionAbstract::getEndLine ; 获取结束行号
ReflectionFunctionAbstract::getExtension ; 获取扩展信息
ReflectionFunctionAbstract::getExtensionName ; 获取扩展名称
ReflectionFunctionAbstract::getFileName ; 获取文件名称
ReflectionFunctionAbstract::getName ; 获取函数名称
ReflectionFunctionAbstract::getNamespaceName ; 获取命名空间
ReflectionFunctionAbstract::getNumberOfParameters ; 获取参数数目
ReflectionFunctionAbstract::getNumberOfRequiredParameters ; 获取必须输入参数个数
ReflectionFunctionAbstract::getParameters ; 获取参数
ReflectionFunctionAbstract::getReturnType ; Gets the specified return type of a function
ReflectionFunctionAbstract::getShortName ; 获取函数短名称
ReflectionFunctionAbstract::getStartLine ; 获取开始行号
ReflectionFunctionAbstract::getStaticVariables ; 获取静态变量
ReflectionFunctionAbstract::hasReturnType ; Checks if the function has a specified return type
ReflectionFunctionAbstract::inNamespace ; 检查是否处于命名空间
ReflectionFunctionAbstract::isClosure ; 检查是否是匿名函数
ReflectionFunctionAbstract::isDeprecated ; 检查是否已经弃用
ReflectionFunctionAbstract::isGenerator ; 判断函数是否是一个生成器函数
ReflectionFunctionAbstract::isInternal ; 判断函数是否是内置函数
ReflectionFunctionAbstract::isUserDefined ; 检查是否是用户定义
ReflectionFunctionAbstract::isVariadic ; Checks if the function is variadic
ReflectionFunctionAbstract::returnsReference ; 检查是否返回参考信息
ReflectionFunctionAbstract::__clone ; 复制函数
ReflectionFunctionAbstract::__toString ; 字符串化
ReflectionMethod::export ; 输出一个回调方法
ReflectionMethod::getClosure ; 返回一个动态建立的方法调用接口，译者注：可以使用这个返回值直接调用非公开方法。
ReflectionMethod::getDeclaringClass ; 获取反射函数调用参数的类表达
ReflectionMethod::getModifiers ; 获取方法的修饰符
ReflectionMethod::getPrototype ; 返回方法原型 (如果存在)
ReflectionMethod::invoke ; Invoke
ReflectionMethod::invokeArgs ; 带参数执行
ReflectionMethod::isAbstract ; 判断方法是否是抽象方法
ReflectionMethod::isConstructor ; 判断方法是否是构造方法
ReflectionMethod::isDestructor ; 判断方法是否是析构方法
ReflectionMethod::isFinal ; 判断方法是否定义 final
ReflectionMethod::isPrivate ; 判断方法是否是私有方法
ReflectionMethod::isProtected ; 判断方法是否是保护方法 (protected)
ReflectionMethod::isPublic ; 判断方法是否是公开方法
ReflectionMethod::isStatic ; 判断方法是否是静态方法
ReflectionMethod::setAccessible ; 设置方法是否访问
ReflectionMethod::__construct ; ReflectionMethod 的构造函数
ReflectionMethod::__toString ; 返回反射方法对象的字符串表达
ReflectionObject::export ; Export
ReflectionObject::__construct ; Constructs a ReflectionObject
ReflectionParameter::allowsNull ; Checks if null is allowed
ReflectionParameter::canBePassedByValue ; Returns whether this parameter can be passed by value
ReflectionParameter::export ; Exports
ReflectionParameter::getClass ; Get the type hinted class
ReflectionParameter::getDeclaringClass ; Gets declaring class
ReflectionParameter::getDeclaringFunction ; Gets declaring function
ReflectionParameter::getDefaultValue ; Gets default parameter value
ReflectionParameter::getDefaultValueConstantName ; Returns the default value's constant name if default value is constant or null
ReflectionParameter::getName ; Gets parameter name
ReflectionParameter::getPosition ; Gets parameter position
ReflectionParameter::getType ; Gets a parameter's type
ReflectionParameter::hasType ; Checks if parameter has a type
ReflectionParameter::isArray ; Checks if parameter expects an array
ReflectionParameter::isCallable ; Returns whether parameter MUST be callable
ReflectionParameter::isDefaultValueAvailable ; Checks if a default value is available
ReflectionParameter::isDefaultValueConstant ; Returns whether the default value of this parameter is constant
ReflectionParameter::isOptional ; Checks if optional
ReflectionParameter::isPassedByReference ; Checks if passed by reference
ReflectionParameter::isVariadic ; Checks if the parameter is variadic
ReflectionParameter::__clone ; Clone
ReflectionParameter::__construct ; Construct
ReflectionParameter::__toString ; To string
ReflectionProperty::export ; Export
ReflectionProperty::getDeclaringClass ; Gets declaring class
ReflectionProperty::getDocComment ; Gets doc comment
ReflectionProperty::getModifiers ; Gets modifiers
ReflectionProperty::getName ; Gets property name
ReflectionProperty::getValue ; Gets value
ReflectionProperty::isDefault ; Checks if property is a default property
ReflectionProperty::isPrivate ; Checks if property is private
ReflectionProperty::isProtected ; Checks if property is protected
ReflectionProperty::isPublic ; Checks if property is public
ReflectionProperty::isStatic ; Checks if property is static
ReflectionProperty::setAccessible ; Set property accessibility
ReflectionProperty::setValue ; Set property value
ReflectionProperty::__clone ; Clone
ReflectionProperty::__construct ; Construct a ReflectionProperty object
ReflectionProperty::__toString ; To string
ReflectionZendExtension::export ; Export
ReflectionZendExtension::getAuthor ; Gets author
ReflectionZendExtension::getCopyright ; Gets copyright
ReflectionZendExtension::getName ; Gets name
ReflectionZendExtension::getURL ; Gets URL
ReflectionZendExtension::getVersion ; Gets version
ReflectionZendExtension::__clone ; Clone handler
ReflectionZendExtension::__construct ; Constructor
ReflectionZendExtension::__toString ; To string handler
Reflector::export ; Exports
Reflector::__toString ; 转化成字符串
RegexIterator::accept ; Get accept status
RegexIterator::getFlags ; Get flags
RegexIterator::getMode ; Returns operation mode.
RegexIterator::getPregFlags ; Returns the regular expression flags.
RegexIterator::getRegex ; Returns current regular expression
RegexIterator::setFlags ; Sets the flags.
RegexIterator::setMode ; Sets the operation mode.
RegexIterator::setPregFlags ; Sets the regular expression flags.
RegexIterator::__construct ; Create a new RegexIterator
register_shutdown_function ; Register a function for execution on shutdown
register_tick_function ; Register a function for execution on each tick
rename ; 重命名一个文件或目录
reset ; 将数组的内部指针指向第一个单元
restore_error_handler ; 还原之前的错误处理函数
restore_exception_handler ; 恢复之前定义过的异常处理函数。
restore_include_path ; 还原 include_path 配置选项的值
rewind ; 倒回文件指针的位置
rewinddir ; 倒回目录句柄
rmdir ; 删除目录
round ; 对浮点数进行四舍五入
rpm_close ; Closes an RPM file
rpm_get_tag ; Retrieves a header tag from an RPM file
rpm_is_valid ; Tests a filename for validity as an RPM file
rpm_open ; Opens an RPM file
RRDCreator::addArchive ; Adds RRA - archive of data values for each data source.
RRDCreator::addDataSource ; Adds data source definition for RRD database.
RRDCreator::save ; Saves the RRD database to a file
RRDCreator::__construct ; Creates new RRDCreator instance
rrdc_disconnect ; Close any outstanding connection to rrd caching daemon
RRDGraph::save ; Saves the result of query into image
RRDGraph::setOptions ; Sets the options for rrd graph export
RRDGraph::__construct ; Creates new RRDGraph instance
RRDUpdater::update ; Update the RRD database file
RRDUpdater::__construct ; Creates new RRDUpdater instance
rrd_create ; Creates rrd database file
rrd_error ; Gets latest error message.
rrd_fetch ; Fetch the data for graph as array.
rrd_first ; Gets the timestamp of the first sample from rrd file.
rrd_graph ; Creates image from a data.
rrd_info ; Gets information about rrd file
rrd_last ; Gets unix timestamp of the last sample.
rrd_lastupdate ; Gets information about last updated data.
rrd_restore ; Restores the RRD file from XML dump.
rrd_tune ; Tunes some RRD database file header options.
rrd_update ; Updates the RRD database.
rrd_version ; Gets information about underlying rrdtool library
rrd_xport ; Exports the information about RRD database.
rsort ; 对数组逆向排序
rtrim ; 删除字符串末端的空白字符（或者其他字符）
runkit_class_adopt ; Convert a base class to an inherited class, add ancestral methods when appropriate
runkit_class_emancipate ; Convert an inherited class to a base class, removes any method whose scope is ancestral
runkit_constant_add ; Similar to define(), but allows defining in class definitions as well
runkit_constant_redefine ; Redefine an already defined constant
runkit_constant_remove ; Remove/Delete an already defined constant
runkit_function_add ; Add a new function, similar to create_function
runkit_function_copy ; Copy a function to a new function name
runkit_function_redefine ; Replace a function definition with a new implementation
runkit_function_remove ; Remove a function definition
runkit_function_rename ; Change a function's name
runkit_import ; Process a PHP file importing function and class definitions, overwriting where appropriate
runkit_lint ; Check the PHP syntax of the specified php code
runkit_lint_file ; Check the PHP syntax of the specified file
runkit_method_add ; Dynamically adds a new method to a given class
runkit_method_copy ; Copies a method from class to another
runkit_method_redefine ; Dynamically changes the code of the given method
runkit_method_remove ; Dynamically removes the given method
runkit_method_rename ; Dynamically changes the name of the given method
runkit_return_value_used ; Determines if the current functions return value will be used
Runkit_Sandbox ; Runkit Sandbox Class -- PHP Virtual Machine
runkit_sandbox_output_handler ; Specify a function to capture and/or process output from a runkit sandbox
Runkit_Sandbox_Parent ; Runkit Anti-Sandbox Class
runkit_superglobals ; Return numerically indexed array of registered superglobals
SAMConnection::commit ; Commits (completes) the current unit of work.
SAMConnection::connect ; Establishes a connection to a Messaging Server
SAMConnection::disconnect ; Disconnects from a Messaging Server
SAMConnection::errno ; Contains the unique numeric error code of the last executed SAM operation.
SAMConnection::error ; Contains the text description of the last failed SAM operation.
SAMConnection::isConnected ; Queries whether a connection is established to a Messaging Server
SAMConnection::peek ; Read a message from a queue without removing it from the queue.
SAMConnection::peekAll ; Read one or more messages from a queue without removing it from the queue.
SAMConnection::receive ; Receive a message from a queue or subscription.
SAMConnection::remove ; Remove a message from a queue.
SAMConnection::rollback ; Cancels (rolls back) an in-flight unit of work.
SAMConnection::send ; Send a message to a queue or publish an item to a topic.
SAMConnection::setDebug ; Turn on or off additional debugging output.
SAMConnection::subscribe ; Create a subscription to a specified topic.
SAMConnection::unsubscribe ; Cancel a subscription to a specified topic.
SAMConnection::__construct ; Creates a new connection to a Messaging Server
SAMMessage::body ; The body of the message.
SAMMessage::header ; The header properties of the message.
SAMMessage::__construct ; Creates a new Message object
SCA::getService ; Obtain a proxy for a service
scandir ; 列出指定路径中的文件和目录
SeekableIterator::seek ; Seeks to a position
sem_acquire ; Acquire a semaphore
sem_get ; Get a semaphore id
sem_release ; Release a semaphore
sem_remove ; Remove a semaphore
Serializable::serialize ; 对象的字符串表示
Serializable::unserialize ; 构造对象
serialize ; 产生一个可存储的值的表示
SessionHandler::close ; Close the session
SessionHandler::create_sid ; Return a new session ID
SessionHandler::destroy ; Destroy a session
SessionHandler::gc ; Cleanup old sessions
SessionHandler::open ; Initialize session
SessionHandler::read ; Read session data
SessionHandler::write ; Write session data
SessionHandlerInterface::close ; Close the session
SessionHandlerInterface::destroy ; Destroy a session
SessionHandlerInterface::gc ; Cleanup old sessions
SessionHandlerInterface::open ; Initialize session
SessionHandlerInterface::read ; Read session data
SessionHandlerInterface::write ; Write session data
session_abort ; Discard session array changes and finish session
session_cache_expire ; 返回当前缓存的到期时间
session_cache_limiter ; 读取/设置缓存限制器
session_commit ; session_write_close 的别名
session_decode ; 解码会话数据
session_destroy ; 销毁一个会话中的全部数据
session_encode ; 将当前会话数据编码为一个字符串
session_get_cookie_params ; 获取会话 cookie 参数
session_id ; 获取/设置当前会话 ID
session_is_registered ; 检查变量是否在会话中已经注册
session_module_name ; 获取/设置会话模块名称
session_name ; 读取/设置会话名称
session_regenerate_id ; 使用新生成的会话 ID 更新现有会话 ID
session_register ; Register one or more global variables with the current session
session_register_shutdown ; 关闭会话
session_reset ; Re-initialize session array with original values
session_save_path ; 读取/设置当前会话的保存路径
session_set_cookie_params ; 设置会话 cookie 参数
session_set_save_handler ; 设置用户自定义会话存储函数
session_start ; 启动新会话或者重用现有会话
session_status ; Returns the current session status
session_unregister ; Unregister a global variable from the current session
session_unset ; Free all session variables
session_write_close ; Write session data and end session
setcookie ; Send a cookie
setlocale ; 设置地区信息
setproctitle ; Set the process title
setrawcookie ; Send a cookie without urlencoding the cookie value
setthreadtitle ; Set the thread title
settype ; 设置变量的类型
set_error_handler ; 设置一个用户定义的错误处理函数
set_exception_handler ; 设置一个用户定义的异常处理函数。
set_file_buffer ; stream_set_write_buffer 的别名
set_include_path ; 设置 include_path 配置选项
set_magic_quotes_runtime ; 设置当前 magic_quotes_runtime 配置选项的激活状态
set_socket_blocking ; 别名 stream_set_blocking
set_time_limit ; 设置脚本最大执行时间
sha1 ; 计算字符串的 sha1 散列值
sha1_file ; 计算文件的 sha1 散列值
shell_exec ; 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回。
shmop_close ; Close shared memory block
shmop_delete ; Delete shared memory block
shmop_open ; Create or open shared memory block
shmop_read ; Read data from shared memory block
shmop_size ; Get size of shared memory block
shmop_write ; Write data into shared memory block
shm_attach ; Creates or open a shared memory segment
shm_detach ; Disconnects from shared memory segment
shm_get_var ; Returns a variable from shared memory
shm_has_var ; Check whether a specific entry exists
shm_put_var ; Inserts or updates a variable in shared memory
shm_remove ; Removes shared memory from Unix systems
shm_remove_var ; Removes a variable from shared memory
show_source ; 别名 highlight_file
shuffle ; 将数组打乱
similar_text ; 计算两个字符串的相似度
SimpleXMLElement::addAttribute ; Adds an attribute to the SimpleXML element
SimpleXMLElement::addChild ; Adds a child element to the XML node
SimpleXMLElement::asXML ; Return a well-formed XML string based on SimpleXML element
SimpleXMLElement::attributes ; Identifies an element's attributes
SimpleXMLElement::children ; Finds children of given node
SimpleXMLElement::count ; Counts the children of an element
SimpleXMLElement::getDocNamespaces ; Returns namespaces declared in document
SimpleXMLElement::getName ; Gets the name of the XML element
SimpleXMLElement::getNamespaces ; Returns namespaces used in document
SimpleXMLElement::registerXPathNamespace ; Creates a prefix/ns context for the next XPath query
SimpleXMLElement::saveXML ; 别名 SimpleXMLElement::asXML
SimpleXMLElement::xpath ; Runs XPath query on XML data
SimpleXMLElement::__construct ; Creates a new SimpleXMLElement object
SimpleXMLElement::__toString ; Returns the string content
SimpleXMLIterator::current ; Returns the current element
SimpleXMLIterator::getChildren ; Returns the sub-elements of the current element
SimpleXMLIterator::hasChildren ; Checks whether the current element has sub elements.
SimpleXMLIterator::key ; Return current key
SimpleXMLIterator::next ; Move to next element
SimpleXMLIterator::rewind ; Rewind to the first element
SimpleXMLIterator::valid ; Check whether the current element is valid
simplexml_import_dom ; Get a SimpleXMLElement object from a DOM node.
simplexml_load_file ; Interprets an XML file into an object
simplexml_load_string ; Interprets a string of XML into an object
sin ; 正弦
sinh ; 双曲正弦
sizeof ; count 的别名
sleep ; 延缓执行
snmp2_get ; Fetch an SNMP object
snmp2_getnext ; Fetch the SNMP object which follows the given object id
snmp2_real_walk ; Return all objects including their respective object ID within the specified one
snmp2_set ; Set the value of an SNMP object
snmp2_walk ; Fetch all the SNMP objects from an agent
snmp3_get ; Fetch an SNMP object
snmp3_getnext ; Fetch the SNMP object which follows the given object id
snmp3_real_walk ; Return all objects including their respective object ID within the specified one
snmp3_set ; Set the value of an SNMP object
snmp3_walk ; Fetch all the SNMP objects from an agent
SNMP::close ; Close SNMP session
SNMP::get ; Fetch an SNMP object
SNMP::getErrno ; Get last error code
SNMP::getError ; Get last error message
SNMP::set ; Set the value of an SNMP object
SNMP::setSecurity ; Configures security-related SNMPv3 session parameters
SNMP::walk ; Fetch SNMP object subtree
SNMP::__construct ; Creates SNMP instance representing session to remote SNMP agent
snmpget ; 获取一个 SNMP 对象
snmpgetnext ; Fetch the SNMP object which follows the given object id
snmprealwalk ; 返回指定的所有对象，包括它们各自的对象 ID
snmpset ; 设置一个 SNMP 对象
snmpwalk ; 从代理返回所有的 SNMP 对象
snmpwalkoid ; 查询关于网络实体的信息树
snmp_get_quick_print ; 返回 UCD 库中 quick_print 设置的当前值
snmp_get_valueretrieval ; Return the method how the SNMP values will be returned
snmp_read_mib ; Reads and parses a MIB file into the active MIB tree
snmp_set_enum_print ; Return all values that are enums with their enum value instead of the raw integer
snmp_set_oid_numeric_print ; Set the OID output format
snmp_set_oid_output_format ; Set the OID output format
snmp_set_quick_print ; 设置 UCD SNMP 库中 quick_print 的值
snmp_set_valueretrieval ; Specify the method how the SNMP values will be returned
SoapClient::SoapClient ; SoapClient constructor
SoapClient::__call ; Calls a SOAP function (deprecated)
SoapClient::__construct ; SoapClient constructor
SoapClient::__doRequest ; Performs a SOAP request
SoapClient::__getFunctions ; Returns list of available SOAP functions
SoapClient::__getLastRequest ; Returns last SOAP request
SoapClient::__getLastRequestHeaders ; Returns the SOAP headers from the last request
SoapClient::__getLastResponse ; Returns last SOAP response
SoapClient::__getLastResponseHeaders ; Returns the SOAP headers from the last response
SoapClient::__getTypes ; Returns a list of SOAP types
SoapClient::__setCookie ; The __setCookie purpose
SoapClient::__setLocation ; Sets the location of the Web service to use
SoapClient::__setSoapHeaders ; Sets SOAP headers for subsequent calls
SoapClient::__soapCall ; Calls a SOAP function
SoapFault::SoapFault ; SoapFault constructor
SoapFault::__construct ; SoapFault constructor
SoapFault::__toString ; Obtain a string representation of a SoapFault
SoapHeader::SoapHeader ; SoapHeader constructor
SoapHeader::__construct ; SoapHeader constructor
SoapParam::SoapParam ; SoapParam constructor
SoapParam::__construct ; SoapParam constructor
SoapServer::addFunction ; 添加一个或多个函数来处理SOAP请求
SoapServer::addSoapHeader ; Add a SOAP header to the response
SoapServer::fault ; Issue SoapServer fault indicating an error
SoapServer::getFunctions ; Returns list of defined functions
SoapServer::handle ; Handles a SOAP request
SoapServer::setClass ; Sets the class which handles SOAP requests
SoapServer::setObject ; Sets the object which will be used to handle SOAP requests
SoapServer::setPersistence ; Sets SoapServer persistence mode
SoapServer::SoapServer ; SoapServer constructor
SoapServer::__construct ; SoapServer constructor
SoapVar::SoapVar ; SoapVar constructor
SoapVar::__construct ; SoapVar constructor
socket_accept ; Accepts a connection on a socket
socket_bind ; 给套接字绑定名字
socket_clear_error ; 清除套接字或者最后的错误代码上的错误
socket_close ; 关闭套接字资源
socket_cmsg_space ; Calculate message buffer size
socket_connect ; 开启一个套接字连接
socket_create ; 创建一个套接字（通讯节点）
socket_create_listen ; Opens a socket on port to accept connections
socket_create_pair ; Creates a pair of indistinguishable sockets and stores them in an array
socket_getpeername ; Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type
socket_getsockname ; Queries the local side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type
socket_get_option ; Gets socket options for the socket
socket_get_status ; 别名 stream_get_meta_data
socket_import_stream ; Import a stream
socket_last_error ; Returns the last error on the socket
socket_listen ; Listens for a connection on a socket
socket_read ; Reads a maximum of length bytes from a socket
socket_recv ; Receives data from a connected socket
socket_recvfrom ; Receives data from a socket whether or not it is connection-oriented
socket_recvmsg ; Read a message
socket_select ; Runs the select() system call on the given arrays of sockets with a specified timeout
socket_send ; Sends data to a connected socket
socket_sendmsg ; Send a message
socket_sendto ; Sends a message to a socket, whether it is connected or not
socket_set_block ; Sets blocking mode on a socket resource
socket_set_blocking ; 别名 stream_set_blocking
socket_set_nonblock ; Sets nonblocking mode for file descriptor fd
socket_set_option ; Sets socket options for the socket
socket_set_timeout ; 别名 stream_set_timeout
socket_shutdown ; Shuts down a socket for receiving, sending, or both
socket_strerror ; Return a string describing a socket error
socket_write ; Write to a socket
sort ; 对数组排序
soundex ; Calculate the soundex key of a string
SphinxClient::addQuery ; Add query to multi-query batch
SphinxClient::buildExcerpts ; Build text snippets
SphinxClient::buildKeywords ; Extract keywords from query
SphinxClient::close ; 关闭先前打开的持久连接
SphinxClient::escapeString ; Escape special characters
SphinxClient::getLastError ; Get the last error message
SphinxClient::getLastWarning ; Get the last warning
SphinxClient::open ; 建立到搜索服务端的持久连接
SphinxClient::query ; 执行搜索查询
SphinxClient::resetFilters ; Clear all filters
SphinxClient::resetGroupBy ; Clear all group-by settings
SphinxClient::runQueries ; Run a batch of search queries
SphinxClient::setArrayResult ; 控制搜索结果集的返回格式
SphinxClient::setConnectTimeout ; Set connection timeout
SphinxClient::setFieldWeights ; Set field weights
SphinxClient::setFilter ; 增加整数值过滤器
SphinxClient::setFilterFloatRange ; Add new float range filter
SphinxClient::setFilterRange ; Add new integer range filter
SphinxClient::setGeoAnchor ; Set anchor point for a geosphere distance calculations
SphinxClient::setGroupBy ; Set grouping attribute
SphinxClient::setGroupDistinct ; Set attribute name for per-group distinct values count calculations
SphinxClient::setIDRange ; Set a range of accepted document IDs
SphinxClient::setIndexWeights ; Set per-index weights
SphinxClient::setLimits ; 设置返回结果集偏移量和数目
SphinxClient::setMatchMode ; 设置全文查询的匹配模式
SphinxClient::setMaxQueryTime ; Set maximum query time
SphinxClient::setRankingMode ; Set ranking mode
SphinxClient::setRetries ; Set retry count and delay
SphinxClient::setSelect ; Set select clause
SphinxClient::setServer ; 设置searchd的主机名和TCP端口
SphinxClient::setSortMode ; Set matches sorting mode
SphinxClient::status ; Queries searchd status
SphinxClient::updateAttributes ; Update document attributes
SphinxClient::__construct ; Create a new SphinxClient object
SplDoublyLinkedList::add ; Add/insert a new value at the specified index
SplDoublyLinkedList::bottom ; Peeks at the node from the beginning of the doubly linked list
SplDoublyLinkedList::count ; Counts the number of elements in the doubly linked list.
SplDoublyLinkedList::current ; Return current array entry
SplDoublyLinkedList::getIteratorMode ; Returns the mode of iteration
SplDoublyLinkedList::isEmpty ; Checks whether the doubly linked list is empty.
SplDoublyLinkedList::key ; Return current node index
SplDoublyLinkedList::next ; Move to next entry
SplDoublyLinkedList::offsetExists ; Returns whether the requested $index exists
SplDoublyLinkedList::offsetGet ; Returns the value at the specified $index
SplDoublyLinkedList::offsetSet ; Sets the value at the specified $index to $newval
SplDoublyLinkedList::offsetUnset ; Unsets the value at the specified $index
SplDoublyLinkedList::pop ; Pops a node from the end of the doubly linked list
SplDoublyLinkedList::prev ; Move to previous entry
SplDoublyLinkedList::push ; Pushes an element at the end of the doubly linked list
SplDoublyLinkedList::rewind ; Rewind iterator back to the start
SplDoublyLinkedList::serialize ; Serializes the storage
SplDoublyLinkedList::setIteratorMode ; Sets the mode of iteration
SplDoublyLinkedList::shift ; Shifts a node from the beginning of the doubly linked list
SplDoublyLinkedList::top ; Peeks at the node from the end of the doubly linked list
SplDoublyLinkedList::unserialize ; Unserializes the storage
SplDoublyLinkedList::unshift ; Prepends the doubly linked list with an element
SplDoublyLinkedList::valid ; Check whether the doubly linked list contains more nodes
SplDoublyLinkedList::__construct ; Constructs a new doubly linked list
SplEnum::getConstList ; Returns all consts (possible values) as an array.
SplFileInfo::getATime ; Gets last access time of the file
SplFileInfo::getBasename ; Gets the base name of the file
SplFileInfo::getCTime ; 获取文件 inode 修改时间
SplFileInfo::getExtension ; Gets the file extension
SplFileInfo::getFileInfo ; Gets an SplFileInfo object for the file
SplFileInfo::getFilename ; Gets the filename
SplFileInfo::getGroup ; Gets the file group
SplFileInfo::getInode ; Gets the inode for the file
SplFileInfo::getLinkTarget ; Gets the target of a link
SplFileInfo::getMTime ; Gets the last modified time
SplFileInfo::getOwner ; Gets the owner of the file
SplFileInfo::getPath ; Gets the path without filename
SplFileInfo::getPathInfo ; Gets an SplFileInfo object for the path
SplFileInfo::getPathname ; Gets the path to the file
SplFileInfo::getPerms ; Gets file permissions
SplFileInfo::getRealPath ; Gets absolute path to file
SplFileInfo::getSize ; Gets file size
SplFileInfo::getType ; Gets file type
SplFileInfo::isDir ; Tells if the file is a directory
SplFileInfo::isExecutable ; Tells if the file is executable
SplFileInfo::isFile ; Tells if the object references a regular file
SplFileInfo::isLink ; Tells if the file is a link
SplFileInfo::isReadable ; Tells if file is readable
SplFileInfo::isWritable ; Tells if the entry is writable
SplFileInfo::openFile ; Gets an SplFileObject object for the file
SplFileInfo::setFileClass ; Sets the class used with SplFileInfo::openFile
SplFileInfo::setInfoClass ; Sets the class used with SplFileInfo::getFileInfo and SplFileInfo::getPathInfo
SplFileInfo::__construct ; Construct a new SplFileInfo object
SplFileInfo::__toString ; Returns the path to the file as a string
SplFileObject::current ; Retrieve current line of file
SplFileObject::eof ; Reached end of file
SplFileObject::fflush ; Flushes the output to the file
SplFileObject::fgetc ; Gets character from file
SplFileObject::fgetcsv ; Gets line from file and parse as CSV fields
SplFileObject::fgets ; Gets line from file
SplFileObject::fgetss ; Gets line from file and strip HTML tags
SplFileObject::flock ; Portable file locking
SplFileObject::fpassthru ; Output all remaining data on a file pointer
SplFileObject::fputcsv ; Write a field array as a CSV line
SplFileObject::fread ; Read from file
SplFileObject::fscanf ; Parses input from file according to a format
SplFileObject::fseek ; Seek to a position
SplFileObject::fstat ; Gets information about the file
SplFileObject::ftell ; Return current file position
SplFileObject::ftruncate ; Truncates the file to a given length
SplFileObject::fwrite ; Write to file
SplFileObject::getChildren ; No purpose
SplFileObject::getCsvControl ; Get the delimiter and enclosure character for CSV
SplFileObject::getCurrentLine ; Alias of SplFileObject::fgets
SplFileObject::getFlags ; Gets flags for the SplFileObject
SplFileObject::getMaxLineLen ; Get maximum line length
SplFileObject::hasChildren ; SplFileObject does not have children
SplFileObject::key ; Get line number
SplFileObject::next ; Read next line
SplFileObject::rewind ; Rewind the file to the first line
SplFileObject::seek ; Seek to specified line
SplFileObject::setCsvControl ; Set the delimiter and enclosure character for CSV
SplFileObject::setFlags ; Sets flags for the SplFileObject
SplFileObject::setMaxLineLen ; Set maximum line length
SplFileObject::valid ; Not at EOF
SplFileObject::__construct ; Construct a new file object.
SplFileObject::__toString ; Alias of SplFileObject::current
SplFixedArray::count ; Returns the size of the array
SplFixedArray::current ; Return current array entry
SplFixedArray::fromArray ; Import a PHP array in a SplFixedArray instance
SplFixedArray::getSize ; Gets the size of the array
SplFixedArray::key ; Return current array index
SplFixedArray::next ; Move to next entry
SplFixedArray::offsetExists ; Returns whether the requested index exists
SplFixedArray::offsetGet ; Returns the value at the specified index
SplFixedArray::offsetSet ; Sets a new value at a specified index
SplFixedArray::offsetUnset ; Unsets the value at the specified $index
SplFixedArray::rewind ; Rewind iterator back to the start
SplFixedArray::setSize ; Change the size of an array
SplFixedArray::toArray ; Returns a PHP array from the fixed array
SplFixedArray::valid ; Check whether the array contains more elements
SplFixedArray::__construct ; Constructs a new fixed array
SplFixedArray::__wakeup ; Reinitialises the array after being unserialised
SplHeap::compare ; Compare elements in order to place them correctly in the heap while sifting up.
SplHeap::count ; Counts the number of elements in the heap.
SplHeap::current ; Return current node pointed by the iterator
SplHeap::extract ; Extracts a node from top of the heap and sift up.
SplHeap::insert ; Inserts an element in the heap by sifting it up.
SplHeap::isEmpty ; Checks whether the heap is empty.
SplHeap::key ; Return current node index
SplHeap::next ; Move to the next node
SplHeap::recoverFromCorruption ; Recover from the corrupted state and allow further actions on the heap.
SplHeap::rewind ; Rewind iterator back to the start (no-op)
SplHeap::top ; Peeks at the node from the top of the heap
SplHeap::valid ; Check whether the heap contains more nodes
SplHeap::__construct ; Constructs a new empty heap
split ; 用正则表达式将字符串分割到数组中
spliti ; 用正则表达式不区分大小写将字符串分割到数组中
SplMaxHeap::compare ; Compare elements in order to place them correctly in the heap while sifting up.
SplMinHeap::compare ; Compare elements in order to place them correctly in the heap while sifting up.
SplObjectStorage::addAll ; Adds all objects from another storage
SplObjectStorage::attach ; Adds an object in the storage
SplObjectStorage::contains ; Checks if the storage contains a specific object
SplObjectStorage::count ; Returns the number of objects in the storage
SplObjectStorage::current ; Returns the current storage entry
SplObjectStorage::detach ; Removes an object from the storage
SplObjectStorage::getHash ; Calculate a unique identifier for the contained objects
SplObjectStorage::getInfo ; Returns the data associated with the current iterator entry
SplObjectStorage::key ; Returns the index at which the iterator currently is
SplObjectStorage::next ; Move to the next entry
SplObjectStorage::offsetExists ; Checks whether an object exists in the storage
SplObjectStorage::offsetGet ; Returns the data associated with an object
SplObjectStorage::offsetSet ; Associates data to an object in the storage
SplObjectStorage::offsetUnset ; Removes an object from the storage
SplObjectStorage::removeAll ; Removes objects contained in another storage from the current storage
SplObjectStorage::removeAllExcept ; Removes all objects except for those contained in another storage from the current storage
SplObjectStorage::rewind ; Rewind the iterator to the first storage element
SplObjectStorage::serialize ; Serializes the storage
SplObjectStorage::setInfo ; Sets the data associated with the current iterator entry
SplObjectStorage::unserialize ; Unserializes a storage from its string representation
SplObjectStorage::valid ; Returns if the current iterator entry is valid
SplObserver::update ; Receive update from subject
SplPriorityQueue::compare ; Compare priorities in order to place elements correctly in the heap while sifting up.
SplPriorityQueue::count ; Counts the number of elements in the queue.
SplPriorityQueue::current ; Return current node pointed by the iterator
SplPriorityQueue::extract ; Extracts a node from top of the heap and sift up.
SplPriorityQueue::insert ; Inserts an element in the queue by sifting it up.
SplPriorityQueue::isEmpty ; Checks whether the queue is empty.
SplPriorityQueue::key ; Return current node index
SplPriorityQueue::next ; Move to the next node
SplPriorityQueue::recoverFromCorruption ; Recover from the corrupted state and allow further actions on the queue.
SplPriorityQueue::rewind ; Rewind iterator back to the start (no-op)
SplPriorityQueue::setExtractFlags ; Sets the mode of extraction
SplPriorityQueue::top ; Peeks at the node from the top of the queue
SplPriorityQueue::valid ; Check whether the queue contains more nodes
SplPriorityQueue::__construct ; Constructs a new empty queue
SplQueue::dequeue ; Dequeues a node from the queue
SplQueue::enqueue ; Adds an element to the queue.
SplQueue::setIteratorMode ; Sets the mode of iteration
SplQueue::__construct ; Constructs a new queue implemented using a doubly linked list
SplStack::setIteratorMode ; Sets the mode of iteration
SplStack::__construct ; Constructs a new stack implemented using a doubly linked list
SplSubject::attach ; Attach an SplObserver
SplSubject::detach ; Detach an observer
SplSubject::notify ; Notify an observer
SplTempFileObject::__construct ; Construct a new temporary file object
SplType::__construct ; Creates a new value of some type
spl_autoload ; __autoload()函数的默认实现
spl_autoload_call ; 尝试调用所有已注册的__autoload()函数来装载请求类
spl_autoload_extensions ; 注册并返回spl_autoload函数使用的默认文件扩展名。
spl_autoload_functions ; 返回所有已注册的__autoload()函数。
spl_autoload_register ; 注册给定的函数作为 __autoload 的实现
spl_autoload_unregister ; 注销已注册的__autoload()函数
spl_classes ; 返回所有可用的SPL类
spl_object_hash ; 返回指定对象的hash id
sprintf ; Return a formatted string
SQLite3::busyTimeout ; Sets the busy connection handler
SQLite3::close ; Closes the database connection
SQLite3::createAggregate ; Registers a PHP function for use as an SQL aggregate function
SQLite3::createCollation ; Registers a PHP function for use as an SQL collating function
SQLite3::createFunction ; Registers a PHP function for use as an SQL scalar function
SQLite3::escapeString ; Returns a string that has been properly escaped
SQLite3::exec ; Executes a result-less query against a given database
SQLite3::lastErrorCode ; Returns the numeric result code of the most recent failed SQLite request
SQLite3::lastErrorMsg ; Returns English text describing the most recent failed SQLite request
SQLite3::lastInsertRowID ; Returns the row ID of the most recent INSERT into the database
SQLite3::loadExtension ; Attempts to load an SQLite extension library
SQLite3::open ; Opens an SQLite database
SQLite3::prepare ; Prepares an SQL statement for execution
SQLite3::query ; Executes an SQL query
SQLite3::querySingle ; Executes a query and returns a single result
SQLite3::version ; Returns the SQLite3 library version as a string constant and as a number
SQLite3::__construct ; Instantiates an SQLite3 object and opens an SQLite 3 database
SQLite3Result::columnName ; Returns the name of the nth column
SQLite3Result::columnType ; Returns the type of the nth column
SQLite3Result::fetchArray ; Fetches a result row as an associative or numerically indexed array or both
SQLite3Result::finalize ; Closes the result set
SQLite3Result::numColumns ; Returns the number of columns in the result set
SQLite3Result::reset ; Resets the result set back to the first row
SQLite3Stmt::bindParam ; Binds a parameter to a statement variable
SQLite3Stmt::bindValue ; Binds the value of a parameter to a statement variable
SQLite3Stmt::clear ; Clears all current bound parameters
SQLite3Stmt::close ; Closes the prepared statement
SQLite3Stmt::execute ; Executes a prepared statement and returns a result set object
SQLite3Stmt::paramCount ; Returns the number of parameters within the prepared statement
SQLite3Stmt::reset ; Resets the prepared statement
sql_regcase ; 产生用于不区分大小的匹配的正则表达式
sqrt ; 平方根
srand ; 播下随机数发生器种子
sscanf ; 根据指定格式解析输入的字符
ssdeep_fuzzy_compare ; Calculates the match score between two fuzzy hash signatures
ssdeep_fuzzy_hash ; Create a fuzzy hash from a string
ssdeep_fuzzy_hash_filename ; Create a fuzzy hash from a file
ssh2:// ; Secure Shell 2
ssh2_auth_agent ; Authenticate over SSH using the ssh agent
ssh2_auth_hostbased_file ; Authenticate using a public hostkey
ssh2_auth_none ; Authenticate as &quot;none&quot;
ssh2_auth_password ; Authenticate over SSH using a plain password
ssh2_auth_pubkey_file ; Authenticate using a public key
ssh2_connect ; Connect to an SSH server
ssh2_exec ; Execute a command on a remote server
ssh2_fetch_stream ; Fetch an extended data stream
ssh2_fingerprint ; Retrieve fingerprint of remote server
ssh2_methods_negotiated ; Return list of negotiated methods
ssh2_publickey_add ; Add an authorized publickey
ssh2_publickey_init ; Initialize Publickey subsystem
ssh2_publickey_list ; List currently authorized publickeys
ssh2_publickey_remove ; Remove an authorized publickey
ssh2_scp_recv ; Request a file via SCP
ssh2_scp_send ; Send a file via SCP
ssh2_sftp ; Initialize SFTP subsystem
ssh2_sftp_chmod ; Changes file mode
ssh2_sftp_lstat ; Stat a symbolic link
ssh2_sftp_mkdir ; Create a directory
ssh2_sftp_readlink ; Return the target of a symbolic link
ssh2_sftp_realpath ; Resolve the realpath of a provided path string
ssh2_sftp_rename ; Rename a remote file
ssh2_sftp_rmdir ; Remove a directory
ssh2_sftp_stat ; Stat a file on a remote filesystem
ssh2_sftp_symlink ; Create a symlink
ssh2_sftp_unlink ; Delete a file
ssh2_shell ; Request an interactive shell
ssh2_tunnel ; Open a tunnel through a remote server
SSL 上下文选项 ; SSL 上下文选项清单
stat ; 给出文件的信息
Stomp::abort ; Rolls back a transaction in progress
Stomp::ack ; Acknowledges consumption of a message
Stomp::begin ; Starts a transaction
Stomp::commit ; Commits a transaction in progress
Stomp::error ; Gets the last stomp error
Stomp::getReadTimeout ; Gets read timeout
Stomp::getSessionId ; Gets the current stomp session ID
Stomp::hasFrame ; Indicates whether or not there is a frame ready to read
Stomp::readFrame ; Reads the next frame
Stomp::send ; Sends a message
Stomp::setReadTimeout ; Sets read timeout
Stomp::subscribe ; Registers to listen to a given destination
Stomp::unsubscribe ; Removes an existing subscription
Stomp::__construct ; 打开一个连接
Stomp::__destruct ; Closes stomp connection
StompException::getDetails ; Get exception details
StompFrame::__construct ; Constructor
stomp_connect_error ; Returns a string description of the last connect error
stomp_version ; Gets the current stomp extension version
strcasecmp ; 二进制安全比较字符串（不区分大小写）
strchr ; 别名 strstr
strcmp ; 二进制安全字符串比较
strcoll ; 基于区域设置的字符串比较
strcspn ; 获取不匹配遮罩的起始子字符串的长度
streamWrapper::dir_closedir ; Close directory handle
streamWrapper::dir_opendir ; Open directory handle
streamWrapper::dir_readdir ; Read entry from directory handle
streamWrapper::dir_rewinddir ; Rewind directory handle
streamWrapper::mkdir ; Create a directory
streamWrapper::rename ; Renames a file or directory
streamWrapper::rmdir ; Removes a directory
streamWrapper::stream_cast ; Retrieve the underlaying resource
streamWrapper::stream_close ; Close a resource
streamWrapper::stream_eof ; Tests for end-of-file on a file pointer
streamWrapper::stream_flush ; Flushes the output
streamWrapper::stream_lock ; Advisory file locking
streamWrapper::stream_metadata ; Change stream options
streamWrapper::stream_open ; Opens file or URL
streamWrapper::stream_read ; Read from stream
streamWrapper::stream_seek ; Seeks to specific location in a stream
streamWrapper::stream_set_option ; Change stream options
streamWrapper::stream_stat ; Retrieve information about a file resource
streamWrapper::stream_tell ; Retrieve the current position of a stream
streamWrapper::stream_truncate ; Truncate stream
streamWrapper::stream_write ; Write to stream
streamWrapper::unlink ; Delete a file
streamWrapper::url_stat ; Retrieve information about a file
streamWrapper::__construct ; Constructs a new stream wrapper
streamWrapper::__destruct ; Destructs an existing stream wrapper
stream_bucket_append ; Append bucket to brigade
stream_bucket_make_writeable ; Return a bucket object from the brigade for operating on
stream_bucket_new ; Create a new bucket for use on the current stream
stream_bucket_prepend ; Prepend bucket to brigade
stream_context_create ; 创建资源流上下文
stream_context_get_default ; Retrieve the default stream context
stream_context_get_options ; 获取资源流/数据包/上下文的参数
stream_context_get_params ; Retrieves parameters from a context
stream_context_set_default ; Set the default stream context
stream_context_set_option ; 对资源流、数据包或者上下文设置参数
stream_context_set_params ; Set parameters for a stream/wrapper/context
stream_copy_to_stream ; Copies data from one stream to another
stream_encoding ; 设置数据流的字符集
stream_filter_append ; Attach a filter to a stream
stream_filter_prepend ; Attach a filter to a stream
stream_filter_register ; Register a user defined stream filter
stream_filter_remove ; 从资源流里移除某个过滤器
stream_get_contents ; 读取资源流到一个字符串
stream_get_filters ; 获取已注册的数据流过滤器列表
stream_get_line ; 从资源流里读取一行直到给定的定界符
stream_get_meta_data ; 从封装协议文件指针中取得报头／元数据
stream_get_transports ; 获取已注册的套接字传输协议列表
stream_get_wrappers ; 获取已注册的流类型
stream_is_local ; Checks if a stream is a local stream
stream_notification_callback ; A callback function for the notification context parameter
stream_register_wrapper ; 注册一个用 PHP 类实现的 URL 封装协议
stream_resolve_include_path ; Resolve filename against the include path
stream_set_blocking ; 为资源流设置阻塞或者阻塞模式
stream_set_chunk_size ; 设置资源流区块大小
stream_set_read_buffer ; Set read file buffering on the given stream
stream_set_timeout ; Set timeout period on a stream
stream_set_write_buffer ; Sets write file buffering on the given stream
stream_socket_accept ; 接受由 stream_socket_server 创建的套接字连接
stream_socket_client ; Open Internet or Unix domain socket connection
stream_socket_enable_crypto ; Turns encryption on/off on an already connected socket
stream_socket_get_name ; 获取本地或者远程的套接字名称
stream_socket_pair ; 创建一对完全一样的网络套接字连接流
stream_socket_recvfrom ; Receives data from a socket, connected or not
stream_socket_sendto ; Sends a message to a socket, whether it is connected or not
stream_socket_server ; Create an Internet or Unix domain server socket
stream_socket_shutdown ; Shutdown a full-duplex connection
stream_supports_lock ; Tells whether the stream supports locking.
stream_wrapper_restore ; Restores a previously unregistered built-in wrapper
stream_wrapper_unregister ; Unregister a URL wrapper
strftime ; 根据区域设置格式化本地时间／日期
stripcslashes ; 反引用一个使用 addcslashes 转义的字符串
stripos ; 查找字符串首次出现的位置（不区分大小写）
stripslashes ; 反引用一个引用字符串
strip_tags ; 从字符串中去除 HTML 和 PHP 标记
stristr ; strstr 函数的忽略大小写版本
strlen ; 获取字符串长度
strnatcasecmp ; 使用&ldquo;自然顺序&rdquo;算法比较字符串（不区分大小写）
strnatcmp ; 使用自然排序算法比较字符串
strncasecmp ; 二进制安全比较字符串开头的若干个字符（不区分大小写）
strncmp ; 二进制安全比较字符串开头的若干个字符
strpbrk ; 在字符串中查找一组字符的任何一个字符
strpos ; 查找字符串首次出现的位置
strptime ; 解析由 strftime 生成的日期／时间
strrchr ; 查找指定字符在字符串中的最后一次出现
strrev ; 反转字符串
strripos ; 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）
strrpos ; 计算指定字符串在目标字符串中最后一次出现的位置
strspn ; 计算字符串中全部字符都存在于指定字符集合中的第一段子串的长度。
strstr ; 查找字符串的首次出现
strtok ; 标记分割字符串
strtolower ; 将字符串转化为小写
strtotime ; 将任何英文文本的日期时间描述解析为 Unix 时间戳
strtoupper ; 将字符串转化为大写
strtr ; 转换指定字符
strval ; 获取变量的字符串值
str_getcsv ; 解析 CSV 字符串为一个数组
str_ireplace ; str_replace 的忽略大小写版本
str_pad ; 使用另一个字符串填充字符串为指定长度
str_repeat ; 重复一个字符串
str_replace ; 子字符串替换
str_rot13 ; 对字符串执行 ROT13 转换
str_shuffle ; 随机打乱一个字符串
str_split ; 将字符串转换为数组
str_word_count ; 返回字符串中单词的使用情况
substr ; 返回字符串的子串
substr_compare ; 二进制安全比较字符串（从偏移位置比较指定长度）
substr_count ; 计算字串出现的次数
substr_replace ; 替换字符串的子串
symlink ; 建立符号连接
SyncEvent::fire ; Fires/sets the event
SyncEvent::reset ; Resets a manual event
SyncEvent::wait ; Waits for the event to be fired/set
SyncEvent::__construct ; Constructs a new SyncEvent object
SyncMutex::lock ; Waits for an exclusive lock
SyncMutex::unlock ; Unlocks the mutex
SyncMutex::__construct ; Constructs a new SyncMutex object
SyncReaderWriter::readlock ; Waits for a read lock
SyncReaderWriter::readunlock ; Releases a read lock
SyncReaderWriter::writelock ; Waits for an exclusive write lock
SyncReaderWriter::writeunlock ; Releases a write lock
SyncReaderWriter::__construct ; Constructs a new SyncReaderWriter object
SyncSemaphore::lock ; Decreases the count of the semaphore or waits
SyncSemaphore::unlock ; Increases the count of the semaphore
SyncSemaphore::__construct ; Constructs a new SyncSemaphore object
syslog ; Generate a system log message
system ; 执行外部程序，并且显示输出
sys_getloadavg ; 获取系统的负载（load average）
sys_get_temp_dir ; 返回用于临时文件的目录
taint ; Taint a string
tan ; 正切
tanh ; 双曲正切
tcpwrap_check ; Performs a tcpwrap check
tempnam ; 建立一个具有唯一文件名的文件
textdomain ; Sets the default domain
Thread::detach ; 执行
Thread::getCreatorId ; 识别
Thread::getCurrentThread ; 识别
Thread::getCurrentThreadId ; 识别
Thread::getThreadId ; 识别
Thread::globally ; 执行
Thread::isJoined ; 状态监测
Thread::isStarted ; 状态检测
Thread::join ; 同步
Thread::kill ; 执行
Thread::start ; 执行
Threaded::chunk ; 操作
Threaded::count ; Manipulation
Threaded::extend ; Runtime Manipulation
Threaded::from ; Creation
Threaded::getTerminationInfo ; Error Detection
Threaded::isRunning ; State Detection
Threaded::isTerminated ; State Detection
Threaded::isWaiting ; State Detection
Threaded::lock ; Synchronization
Threaded::merge ; Manipulation
Threaded::notify ; Synchronization
Threaded::pop ; Manipulation
Threaded::run ; Execution
Threaded::shift ; Manipulation
Threaded::synchronized ; Synchronization
Threaded::unlock ; Synchronization
Threaded::wait ; Synchronization
tidy::$errorBuffer ; Return warnings and errors which occurred parsing the specified document
tidy::body ; Returns a tidyNode object starting from the &lt;body&gt; tag of the tidy parse tree
tidy::cleanRepair ; Execute configured cleanup and repair operations on parsed markup
tidy::diagnose ; Run configured diagnostics on parsed and repaired markup
tidy::getConfig ; Get current Tidy configuration
tidy::getHtmlVer ; Get the Detected HTML version for the specified document
tidy::getOpt ; Returns the value of the specified configuration option for the tidy document
tidy::getOptDoc ; Returns the documentation for the given option name
tidy::getRelease ; Get release date (version) for Tidy library
tidy::getStatus ; Get status of specified document
tidy::head ; Returns a tidyNode object starting from the &lt;head&gt; tag of the tidy parse tree
tidy::html ; Returns a tidyNode object starting from the &lt;html&gt; tag of the tidy parse tree
tidy::isXhtml ; Indicates if the document is a XHTML document
tidy::isXml ; Indicates if the document is a generic (non HTML/XHTML) XML document
tidy::parseFile ; Parse markup in file or URI
tidy::parseString ; Parse a document stored in a string
tidy::repairFile ; Repair a file and return it as a string
tidy::repairString ; Repair a string using an optionally provided configuration file
tidy::root ; Returns a tidyNode object representing the root of the tidy parse tree
tidy::__construct ; Constructs a new tidy object
tidyNode::getParent ; Returns the parent node of the current node
tidyNode::hasChildren ; Checks if a node has children
tidyNode::hasSiblings ; Checks if a node has siblings
tidyNode::isAsp ; Checks if this node is ASP
tidyNode::isComment ; Checks if a node represents a comment
tidyNode::isHtml ; Checks if a node is part of a HTML document
tidyNode::isJste ; Checks if this node is JSTE
tidyNode::isPhp ; Checks if a node is PHP
tidyNode::isText ; Checks if a node represents text (no markup)
tidy_access_count ; Returns the Number of Tidy accessibility warnings encountered for specified document
tidy_config_count ; Returns the Number of Tidy configuration errors encountered for specified document
tidy_error_count ; Returns the Number of Tidy errors encountered for specified document
tidy_get_output ; Return a string representing the parsed tidy markup
tidy_load_config ; Load an ASCII Tidy configuration file with the specified encoding
tidy_reset_config ; Restore Tidy configuration to default values
tidy_save_config ; Save current settings to named file
tidy_setopt ; Updates the configuration settings for the specified tidy document
tidy_set_encoding ; Set the input/output character encoding for parsing markup
tidy_warning_count ; Returns the Number of Tidy warnings encountered for specified document
time ; 返回当前的 Unix 时间戳
timezone_abbreviations_list ; 别名 DateTimeZone::listAbbreviations
timezone_identifiers_list ; 别名 DateTimeZone::listIdentifiers
timezone_location_get ; 别名 DateTimeZone::getLocation
timezone_name_from_abbr ; Returns the timezone name from abbreviation
timezone_name_get ; 别名 DateTimeZone::getName
timezone_offset_get ; 别名 DateTimeZone::getOffset
timezone_open ; 别名 DateTimeZone::__construct
timezone_transitions_get ; 别名 DateTimeZone::getTransitions
timezone_version_get ; Gets the version of the timezonedb
time_nanosleep ; 延缓执行若干秒和纳秒
time_sleep_until ; 使脚本睡眠到指定的时间为止。
tmpfile ; 建立一个临时文件
token_get_all ; 将提供的源码按 PHP 标记进行分割
token_name ; 获取提供的 PHP 解析器代号的符号名称
touch ; 设定文件的访问和修改时间
trait_exists ; 检查指定的 trait 是否存在
trigger_error ; 产生一个用户级别的 error/warning/notice 信息
trim ; 去除字符串首尾处的空白字符（或者其他字符）
uasort ; 使用用户自定义的比较函数对数组中的值进行排序并保持索引关联
ucfirst ; 将字符串的首字母转换为大写
ucwords ; 将字符串中每个单词的首字母转换为大写
uksort ; 使用用户自定义的比较函数对数组中的键名进行排序
umask ; 改变当前的 umask
uniqid ; 生成一个唯一ID
unixtojd ; 转变Unix时间戳为Julian Day计数
unlink ; 删除文件
unpack ; Unpack data from binary string
unregister_tick_function ; De-register a function for execution on each tick
unserialize ; 从已存储的表示中创建 PHP 的值
unset ; 释放给定的变量
untaint ; Untaint strings
urldecode ; 解码已编码的 URL 字符串
urlencode ; 编码 URL 字符串
user_error ; trigger_error 的别名
use_soap_error_handler ; Set whether to use the SOAP error handler
usleep ; 以指定的微秒数延迟执行
usort ; 使用用户自定义的比较函数对数组中的值进行排序
utf8_decode ; 将用 UTF-8 方式编码的 ISO-8859-1 字符串转换成单字节的 ISO-8859-1 字符串。
utf8_encode ; 将 ISO-8859-1 编码的字符串转换为 UTF-8 编码
var_dump ; 打印变量的相关信息
var_export ; 输出或返回一个变量的字符串表示
version_compare ; 对比两个「PHP 规范化」的版本数字字符串
vfprintf ; 将格式化字符串写入流
virtual ; 执行 Apache 子请求
vprintf ; 输出格式化字符串
vsprintf ; 返回格式化字符串
wddx_add_vars ; Add variables to a WDDX packet with the specified ID
wddx_deserialize ; Unserializes a WDDX packet
wddx_packet_end ; Ends a WDDX packet with the specified ID
wddx_packet_start ; Starts a new WDDX packet with structure inside it
wddx_serialize_value ; Serialize a single value into a WDDX packet
wddx_serialize_vars ; Serialize variables into a WDDX packet
wordwrap ; 打断字符串为指定数量的字串
Worker::getStacked ; 栈分析
Worker::isShutdown ; 状态检测
Worker::isWorking ; 状态检测
Worker::shutdown ; 同步
Worker::stack ; 栈操作
Worker::unstack ; 栈操作
xattr_get ; Get an extended attribute
xattr_list ; Get a list of extended attributes
xattr_remove ; Remove an extended attribute
xattr_set ; Set an extended attribute
xattr_supported ; Check if filesystem supports extended attributes
xhprof_disable ; 停止 xhprof 分析器
xhprof_enable ; 启动 xhprof 性能分析器
xhprof_sample_disable ; 停止 xhprof 性能采样分析器
xhprof_sample_enable ; 以采样模式启动 XHProf 性能分析
XMLReader::close ; Close the XMLReader input
XMLReader::expand ; Returns a copy of the current node as a DOM object
XMLReader::getAttribute ; Get the value of a named attribute
XMLReader::getAttributeNo ; Get the value of an attribute by index
XMLReader::getAttributeNs ; Get the value of an attribute by localname and URI
XMLReader::getParserProperty ; Indicates if specified property has been set
XMLReader::isValid ; Indicates if the parsed document is valid
XMLReader::lookupNamespace ; Lookup namespace for a prefix
XMLReader::moveToAttribute ; Move cursor to a named attribute
XMLReader::moveToAttributeNo ; Move cursor to an attribute by index
XMLReader::moveToAttributeNs ; Move cursor to a named attribute
XMLReader::moveToElement ; Position cursor on the parent Element of current Attribute
XMLReader::moveToFirstAttribute ; Position cursor on the first Attribute
XMLReader::moveToNextAttribute ; Position cursor on the next Attribute
XMLReader::next ; Move cursor to next node skipping all subtrees
XMLReader::open ; Set the URI containing the XML to parse
XMLReader::read ; Move to next node in document
XMLReader::readInnerXML ; Retrieve XML from current node
XMLReader::readOuterXML ; Retrieve XML from current node, including it self
XMLReader::readString ; Reads the contents of the current node as a string
XMLReader::setParserProperty ; Set parser options
XMLReader::setRelaxNGSchema ; Set the filename or URI for a RelaxNG Schema
XMLReader::setRelaxNGSchemaSource ; Set the data containing a RelaxNG Schema
XMLReader::setSchema ; Validate document against XSD
XMLReader::XML ; Set the data containing the XML to parse
xmlrpc_decode ; 将 XML 译码为 PHP 本身的类型
xmlrpc_decode_request ; 将 XML 译码为 PHP 本身的类型
xmlrpc_encode ; 为 PHP 的值生成 XML
xmlrpc_encode_request ; 为 PHP 的值生成 XML
xmlrpc_get_type ; 为 PHP 的值获取 xmlrpc 的类型
xmlrpc_is_fault ; Determines if an array value represents an XMLRPC fault
xmlrpc_parse_method_descriptions ; 将 XML 译码成方法描述的列表
xmlrpc_server_add_introspection_data ; 添加自我描述的文档
xmlrpc_server_call_method ; 解析 XML 请求同时调用方法
xmlrpc_server_create ; 创建一个 xmlrpc 服务端
xmlrpc_server_destroy ; 销毁服务端资源
xmlrpc_server_register_introspection_callback ; 注册一个 PHP 函数用于生成文档
xmlrpc_server_register_method ; 注册一个 PHP 函数用于匹配 xmlrpc 方法名
xmlrpc_set_type ; 为一个 PHP 字符串值设置 xmlrpc 的类型、base64 或日期时间
XMLWriter::endAttribute ; End attribute
XMLWriter::endCData ; End current CDATA
XMLWriter::endComment ; Create end comment
XMLWriter::endDocument ; End current document
XMLWriter::endDTD ; End current DTD
XMLWriter::endDTDAttlist ; End current DTD AttList
XMLWriter::endDTDElement ; End current DTD element
XMLWriter::endDTDEntity ; End current DTD Entity
XMLWriter::endElement ; End current element
XMLWriter::endPI ; End current PI
XMLWriter::flush ; Flush current buffer
XMLWriter::fullEndElement ; End current element
XMLWriter::openMemory ; Create new xmlwriter using memory for string output
XMLWriter::openURI ; Create new xmlwriter using source uri for output
XMLWriter::outputMemory ; Returns current buffer
XMLWriter::setIndent ; Toggle indentation on/off
XMLWriter::setIndentString ; Set string used for indenting
XMLWriter::startAttribute ; Create start attribute
XMLWriter::startAttributeNS ; Create start namespaced attribute
XMLWriter::startCData ; Create start CDATA tag
XMLWriter::startComment ; Create start comment
XMLWriter::startDocument ; Create document tag
XMLWriter::startDTD ; Create start DTD tag
XMLWriter::startDTDAttlist ; Create start DTD AttList
XMLWriter::startDTDElement ; Create start DTD element
XMLWriter::startDTDEntity ; Create start DTD Entity
XMLWriter::startElement ; Create start element tag
XMLWriter::startElementNS ; Create start namespaced element tag
XMLWriter::startPI ; Create start PI tag
XMLWriter::text ; Write text
XMLWriter::writeAttribute ; Write full attribute
XMLWriter::writeAttributeNS ; Write full namespaced attribute
XMLWriter::writeCData ; Write full CDATA tag
XMLWriter::writeComment ; Write full comment tag
XMLWriter::writeDTD ; Write full DTD tag
XMLWriter::writeDTDAttlist ; Write full DTD AttList tag
XMLWriter::writeDTDElement ; Write full DTD element tag
XMLWriter::writeDTDEntity ; Write full DTD Entity tag
XMLWriter::writeElement ; Write full element tag
XMLWriter::writeElementNS ; Write full namespaced element tag
XMLWriter::writePI ; Writes a PI
XMLWriter::writeRaw ; Write a raw XML text
xml_error_string ; 获取 XML 解析器的错误字符串
xml_get_current_byte_index ; 获取 XML 解析器的当前字节索引
xml_get_current_column_number ; 获取 XML 解析器的当前列号
xml_get_current_line_number ; 获取 XML 解析器的当前行号
xml_get_error_code ; 获取 XML 解析器错误代码
xml_parse ; 开始解析一个 XML 文档
xml_parser_create ; 建立一个 XML 解析器
xml_parser_create_ns ; 生成一个支持命名空间的 XML 解析器
xml_parser_free ; 释放指定的 XML 解析器
xml_parser_get_option ; 从 XML 解析器获取选项设置信息
xml_parser_set_option ; 为指定 XML 解析进行选项设置
xml_parse_into_struct ; 将 XML 数据解析到数组中
xml_set_character_data_handler ; 建立字符数据处理器
xml_set_default_handler ; 建立默认处理器
xml_set_element_handler ; 建立起始和终止元素处理器
xml_set_end_namespace_decl_handler ; 建立终止命名空间声明处理器
xml_set_external_entity_ref_handler ; 建立外部实体指向处理器
xml_set_notation_decl_handler ; 建立注释声明处理器
xml_set_object ; 在对象中使用 XML 解析器
xml_set_processing_instruction_handler ; 建立处理指令（PI）处理器
xml_set_start_namespace_decl_handler ; 建立起始命名空间声明处理器
xml_set_unparsed_entity_decl_handler ; 建立未解析实体定义声明处理器
XSLTProcessor::getParameter ; Get value of a parameter
XsltProcessor::getSecurityPrefs ; Get security preferences
XSLTProcessor::hasExsltSupport ; Determine if PHP has EXSLT support
XSLTProcessor::importStylesheet ; Import stylesheet
XSLTProcessor::registerPHPFunctions ; Enables the ability to use PHP functions as XSLT functions
XSLTProcessor::removeParameter ; Remove parameter
XSLTProcessor::setParameter ; Set value for a parameter
XSLTProcessor::setProfiling ; Sets profiling output file
XsltProcessor::setSecurityPrefs ; Set security preferences
XSLTProcessor::transformToDoc ; Transform to a DOMDocument
XSLTProcessor::transformToUri ; Transform to URI
XSLTProcessor::transformToXML ; Transform to XML
XSLTProcessor::__construct ; Creates a new XSLTProcessor object
yaml_emit ; Returns the YAML representation of a value
yaml_emit_file ; Send the YAML representation of a value to a file
yaml_parse ; Parse a YAML stream
yaml_parse_file ; Parse a YAML stream from a file
yaml_parse_url ; Parse a Yaml stream from a URL
Yar_Client::setOpt ; 设置调用的配置
Yar_Client::__call ; 调用远程服务
Yar_Client::__construct ; 创建一个客户端实例
Yar_Client_Exception::getType ; The getType purpose
Yar_Concurrent_Client::call ; 注册一个并行的服务调用
Yar_Concurrent_Client::loop ; 发送所有注册的并行调用
Yar_Server::handle ; 启动HTTP RPC Server
Yar_Server::__construct ; 创建一个HTTP RPC Server
Yar_Server_Exception::getType ; 获取异常的原始类型
zend_logo_guid ; 获取 Zend guid
zend_thread_id ; 返回当前线程的唯一识别符
zend_version ; 获取当前 Zend 引擎的版本
ZipArchive::addEmptyDir ; Add a new directory
ZipArchive::addFile ; Adds a file to a ZIP archive from the given path
ZipArchive::addFromString ; Add a file to a ZIP archive using its contents
ZipArchive::addGlob ; Add files from a directory by glob pattern
ZipArchive::addPattern ; Add files from a directory by PCRE pattern
ZipArchive::close ; Close the active archive (opened or newly created)
ZipArchive::deleteIndex ; delete an entry in the archive using its index
ZipArchive::deleteName ; delete an entry in the archive using its name
ZipArchive::extractTo ; Extract the archive contents
ZipArchive::getArchiveComment ; Returns the Zip archive comment
ZipArchive::getCommentIndex ; Returns the comment of an entry using the entry index
ZipArchive::getCommentName ; Returns the comment of an entry using the entry name
ZipArchive::getExternalAttributesIndex ; Retrieve the external attributes of an entry defined by its index
ZipArchive::getExternalAttributesName ; Retrieve the external attributes of an entry defined by its name
ZipArchive::getFromIndex ; Returns the entry contents using its index
ZipArchive::getFromName ; Returns the entry contents using its name
ZipArchive::getNameIndex ; Returns the name of an entry using its index
ZipArchive::getStatusString ; Returns the status error message, system and/or zip messages
ZipArchive::getStream ; Get a file handler to the entry defined by its name (read only).
ZipArchive::locateName ; Returns the index of the entry in the archive
ZipArchive::open ; Open a ZIP file archive
ZipArchive::renameIndex ; Renames an entry defined by its index
ZipArchive::renameName ; Renames an entry defined by its name
ZipArchive::setArchiveComment ; Set the comment of a ZIP archive
ZipArchive::setCommentIndex ; Set the comment of an entry defined by its index
ZipArchive::setCommentName ; Set the comment of an entry defined by its name
ZipArchive::setCompressionIndex ; Set the compression method of an entry defined by its index
ZipArchive::setCompressionName ; Set the compression method of an entry defined by its name
ZipArchive::setExternalAttributesIndex ; Set the external attributes of an entry defined by its index
ZipArchive::setExternalAttributesName ; Set the external attributes of an entry defined by its name
ZipArchive::setPassword ; Set the password for the active archive
ZipArchive::statIndex ; Get the details of an entry defined by its index.
ZipArchive::statName ; Get the details of an entry defined by its name.
ZipArchive::unchangeAll ; Undo all changes done in the archive
ZipArchive::unchangeArchive ; Revert all global changes done in the archive.
ZipArchive::unchangeIndex ; Revert all changes done to an entry at the given index
ZipArchive::unchangeName ; Revert all changes done to an entry with the given name.
zip_close ; 关闭一个ZIP档案文件
zip_entry_close ; 关闭目录项
zip_entry_compressedsize ; 检索目录项压缩过后的大小
zip_entry_compressionmethod ; 检索目录实体的压缩方法
zip_entry_filesize ; 检索目录实体的实际大小
zip_entry_name ; 检索目录项的名称
zip_entry_open ; 打开用于读取的目录实体
zip_entry_read ; 读取一个打开了的压缩目录实体
zip_open ; 打开ZIP存档文件
zip_read ; 读取ZIP存档文件中下一项
zlib:// ; 压缩流
zlib_decode ; Uncompress any raw/gzip/zlib encoded data
zlib_encode ; Compress data with the specified encoding
zlib_get_coding_type ; Returns the coding type used for output compression
ZMQ::__construct ; ZMQ constructor
ZMQContext::getOpt ; Get context option
ZMQContext::getSocket ; Create a new socket
ZMQContext::isPersistent ; Whether the context is persistent
ZMQContext::setOpt ; Set a socket option
ZMQContext::__construct ; Construct a new ZMQContext object
ZMQDevice::getIdleTimeout ; Get the idle timeout
ZMQDevice::getTimerTimeout ; Get the timer timeout
ZMQDevice::run ; Run the new device
ZMQDevice::setIdleCallback ; Set the idle callback function
ZMQDevice::setIdleTimeout ; Set the idle timeout
ZMQDevice::setTimerCallback ; Set the timer callback function
ZMQDevice::setTimerTimeout ; Set the timer timeout
ZMQDevice::__construct ; Construct a new device
ZMQPoll::add ; Add item to the poll set
ZMQPoll::clear ; Clear the poll set
ZMQPoll::count ; Count items in the poll set
ZMQPoll::getLastErrors ; Get poll errors
ZMQPoll::poll ; Poll the items
ZMQPoll::remove ; Remove item from poll set
ZMQSocket::bind ; Bind the socket
ZMQSocket::connect ; Connect the socket
ZMQSocket::disconnect ; Disconnect a socket
ZMQSocket::getEndpoints ; Get list of endpoints
ZMQSocket::getPersistentId ; Get the persistent id
ZMQSocket::getSocketType ; Get the socket type
ZMQSocket::getSockOpt ; Get socket option
ZMQSocket::isPersistent ; Whether the socket is persistent
ZMQSocket::recv ; Receives a message
ZMQSocket::recvMulti ; Receives a multipart message
ZMQSocket::send ; Sends a message
ZMQSocket::sendmulti ; Sends a multipart message
ZMQSocket::setSockOpt ; Set a socket option
ZMQSocket::unbind ; Unbind the socket
ZMQSocket::__construct ; Construct a new ZMQSocket
__autoload ; 尝试加载未定义的类
__halt_compiler ; 中断编译器的执行
